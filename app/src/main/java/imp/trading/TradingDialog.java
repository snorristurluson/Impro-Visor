/**
 * This Java Class is part of the Impro-Visor Application.
 *
 * Copyright (C) 2015-2018 Robert Keller and Harvey Mudd College.
 *
 * Impro-Visor is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 *
 * Impro-Visor is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of merchantability or fitness
 * for a particular purpose. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * Impro-Visor; if not, write to the Free Software Foundation, Inc., 51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301 USA
 */

package imp.trading;
import imp.gui.TransformMenuDialog;

/**
 * @author Zachary Kondak, formerly ActiveTradingWindow
 * changed to TradingDialog by Robert Keller, so it can be non-modal
 */

import imp.gui.Notate;
import imp.lickgen.LickgenFrame;
import imp.trading.tradingResponseModes.AbstractMelodyTRM;
import imp.trading.tradingResponseModes.ChopAndMemorizeTRM;
import imp.trading.tradingResponseModes.CorrectRhythmTRM;
import imp.trading.tradingResponseModes.GrammarTRM;
import imp.trading.tradingResponseModes.MemorizeMotifsTRM;
import imp.trading.tradingResponseModes.ModifyAndRectifyTRM;
import imp.trading.tradingResponseModes.RepeatAndRectifyTRM;
import imp.trading.tradingResponseModes.RepeatTRM;
import imp.trading.tradingResponseModes.RhythmHelperTRM;
import imp.trading.tradingResponseModes.SuggestRhythmTRM;
import imp.trading.tradingResponseModes.TradingResponseMode;
import imp.trading.tradingResponseModes.TransformTRM;
import imp.util.NonExistentParameterException;
import imp.util.Preferences;
import java.awt.Component;
import java.awt.GridBagConstraints;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.BoxLayout;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JMenu;
import javax.swing.JPanel;
import javax.swing.JButton;
import javax.swing.JRadioButton;
import javax.swing.JRadioButtonMenuItem;

public class TradingDialog extends javax.swing.JDialog implements TradeListener, ActionListener {
 
    private final ActiveTrading activeTrading;
    private boolean tradingNow = false;
    private boolean userFirst = true;
    private boolean isUserInputError = false;
    private final int initialTradeLength = 4;
    private int tradeLength;
    private final int initialTradeLengthSpinner = 32;
    public static final java.awt.Point INITIAL_OPEN_POINT = new java.awt.Point(250, 0);
    UserRhythmSelecterDialog userRhythmSelecterDialog;
    TradingGoalsDialog userGoalsDialog;
    TransformMenuDialog transformMenuDialog;
    
    private final Notate notate;
    private final JPanel rhythmHelperModeRadioPanel;
    JRadioButton suggestRhythmRadioButton;
    JRadioButton correctRhythmRadioButton;
    private final JButton cancelButton;
    
    /**
     * Creates new form ActiveTradingDialog
     * @param notate
     */
    public TradingDialog(Notate notate) {
        super(notate, false);
        this.notate = notate;
        initComponents();
        activeTrading = new ActiveTrading(notate);
        rhythmHelperModeRadioPanel = createRhythmHelperModeRadioPanel();
        cancelButton = createCancelButton();
        playbackControls.add(cancelButton);
        this.addRhythmHelperModeRadioPanel();
        transformMenuDialog = notate.getTransformMenuDialog();
        
        Component[] modes = modeMenu.getMenuComponents();
        for (Component c : modes) {
            JRadioButtonMenuItem mode = (JRadioButtonMenuItem) c;
            mode.addActionListener(this);
        }
        
        updateMusician();
        updateGUIComponents();
        activeTrading.register(this);
        setTradeLength(initialTradeLength);
        tradeLengthSpinner.setValue(initialTradeLengthSpinner);
        loopToggle.setSelected(true);
        updateTradeMode();
        updateLoop();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        leadingSelector = new javax.swing.ButtonGroup();
        modeSelector = new javax.swing.ButtonGroup();
        transformFileSelector = new javax.swing.ButtonGroup();
        grammarGroup = new javax.swing.ButtonGroup();
        activePassiveGroup = new javax.swing.ButtonGroup();
        tradeLengthGroup = new javax.swing.ButtonGroup();
        passiveOptionGroup = new javax.swing.ButtonGroup();
        leadSelectors = new javax.swing.JPanel();
        whoFirstPanel = new javax.swing.JPanel();
        userFirstButton = new javax.swing.JRadioButton();
        improvisorFirstButton = new javax.swing.JRadioButton();
        activePassivePanel = new javax.swing.JPanel();
        activeButton = new javax.swing.JRadioButton();
        passiveButton = new javax.swing.JRadioButton();
        optionsPanel = new javax.swing.JPanel();
        recordCheckBox = new javax.swing.JCheckBox();
        grammarStatusButton = new javax.swing.JButton();
        transformStatusButton = new javax.swing.JButton();
        tempoPanel = new javax.swing.JPanel();
        tempoLabel = new javax.swing.JLabel();
        tempoSlider = new javax.swing.JSlider();
        volumePanel = new javax.swing.JPanel();
        volumeLabel = new javax.swing.JLabel();
        volumeSlider = new javax.swing.JSlider();
        controlsPanel = new javax.swing.JPanel();
        midiPreferencesBtn = new javax.swing.JButton();
        processTimeSelector = new javax.swing.JTextField();
        generationGapSpinner = new javax.swing.JSpinner();
        playbackControls = new javax.swing.JPanel();
        countToggle = new javax.swing.JCheckBox();
        loopToggle = new javax.swing.JCheckBox();
        startOrStopTradingButton = new javax.swing.JButton();
        tradeLengthPanel = new javax.swing.JPanel();
        trade1 = new javax.swing.JRadioButton();
        trade2 = new javax.swing.JRadioButton();
        trade4 = new javax.swing.JRadioButton();
        trade8 = new javax.swing.JRadioButton();
        trade12 = new javax.swing.JRadioButton();
        trade16 = new javax.swing.JRadioButton();
        tradeUseSpinner = new javax.swing.JRadioButton();
        tradeLengthSpinner = new javax.swing.JSpinner();
        mainTradeMenuBar = new javax.swing.JMenuBar();
        tradePlayMenu = new javax.swing.JMenu();
        tradePlayMenuItem = new javax.swing.JMenuItem();
        tradeStopMenuItem = new javax.swing.JMenuItem();
        modeMenu = new javax.swing.JMenu();
        tradeRepeat = new javax.swing.JRadioButtonMenuItem();
        tradeRepeatAndRectify = new javax.swing.JRadioButtonMenuItem();
        tradeRandomModify = new javax.swing.JRadioButtonMenuItem();
        tradeAbstract = new javax.swing.JRadioButtonMenuItem();
        tradeWithAMusician = new javax.swing.JRadioButtonMenuItem();
        tradeGrammarSolo = new javax.swing.JRadioButtonMenuItem();
        tradeStore = new javax.swing.JRadioButtonMenuItem();
        MemorizeMotifsMenuItem = new javax.swing.JRadioButtonMenuItem();
        RhythmHelperMenuItem = new javax.swing.JRadioButtonMenuItem();
        improvMenu = new javax.swing.JMenu();
        lstmNetworkRadio = new javax.swing.JRadioButtonMenuItem();
        grammarRadio = new javax.swing.JRadioButtonMenuItem();
        transformRadio = new javax.swing.JRadioButtonMenuItem();
        grammarDivideRadio = new javax.swing.JRadioButtonMenuItem();
        tradeGrammarMenu = new javax.swing.JMenu();

        setTitle("Impro-Visor Trading");
        setBackground(new java.awt.Color(204, 204, 255));
        setBounds(new java.awt.Rectangle(25, 0, 850, 190));
        setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        setLocation(new java.awt.Point(25, 0));
        setMinimumSize(new java.awt.Dimension(875, 190));
        setPreferredSize(new java.awt.Dimension(875, 200));
        setSize(new java.awt.Dimension(875, 200));
        addComponentListener(new java.awt.event.ComponentAdapter()
        {
            public void componentShown(java.awt.event.ComponentEvent evt)
            {
                activeTradingShown(evt);
            }
            public void componentHidden(java.awt.event.ComponentEvent evt)
            {
                activingTradingHidden(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                activeTradingWindowClosing(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt)
            {
                activeTradingWindowClosed(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        leadSelectors.setMinimumSize(new java.awt.Dimension(270, 55));
        leadSelectors.setPreferredSize(new java.awt.Dimension(270, 65));
        leadSelectors.setLayout(new java.awt.GridBagLayout());

        whoFirstPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Who goes first?", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 12))); // NOI18N
        whoFirstPanel.setLayout(new java.awt.GridBagLayout());

        leadingSelector.add(userFirstButton);
        userFirstButton.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        userFirstButton.setSelected(true);
        userFirstButton.setText("User");
        userFirstButton.setMinimumSize(new java.awt.Dimension(64, 20));
        userFirstButton.setPreferredSize(new java.awt.Dimension(64, 20));
        userFirstButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                userFirstButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        whoFirstPanel.add(userFirstButton, gridBagConstraints);

        leadingSelector.add(improvisorFirstButton);
        improvisorFirstButton.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        improvisorFirstButton.setText("Impro-Visor");
        improvisorFirstButton.setMinimumSize(new java.awt.Dimension(122, 20));
        improvisorFirstButton.setPreferredSize(new java.awt.Dimension(122, 20));
        improvisorFirstButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                improvisorFirstButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        whoFirstPanel.add(improvisorFirstButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 0.4;
        gridBagConstraints.weighty = 0.66;
        leadSelectors.add(whoFirstPanel, gridBagConstraints);

        activePassivePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        activePassivePanel.setLayout(new java.awt.GridBagLayout());

        activePassiveGroup.add(activeButton);
        activeButton.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        activeButton.setSelected(true);
        activeButton.setText("Active");
        activeButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                activeButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        activePassivePanel.add(activeButton, gridBagConstraints);

        activePassiveGroup.add(passiveButton);
        passiveButton.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        passiveButton.setText("Passive");
        passiveButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                passiveButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        activePassivePanel.add(passiveButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.weighty = 0.66;
        leadSelectors.add(activePassivePanel, gridBagConstraints);

        optionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        optionsPanel.setLayout(new java.awt.GridBagLayout());

        recordCheckBox.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        recordCheckBox.setSelected(true);
        recordCheckBox.setText("Record");
        recordCheckBox.setMaximumSize(new java.awt.Dimension(81, 25));
        recordCheckBox.setMinimumSize(new java.awt.Dimension(81, 25));
        recordCheckBox.setPreferredSize(new java.awt.Dimension(81, 25));
        recordCheckBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                recordCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        optionsPanel.add(recordCheckBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.weighty = 0.66;
        leadSelectors.add(optionsPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 0.3;
        getContentPane().add(leadSelectors, gridBagConstraints);

        grammarStatusButton.setBackground(new java.awt.Color(255, 255, 255));
        grammarStatusButton.setToolTipText("Click to select grammar.");
        grammarStatusButton.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Grammar Chooser", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 13))); // NOI18N
        grammarStatusButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        grammarStatusButton.setMaximumSize(new java.awt.Dimension(300, 50));
        grammarStatusButton.setMinimumSize(new java.awt.Dimension(250, 40));
        grammarStatusButton.setPreferredSize(new java.awt.Dimension(300, 40));
        grammarStatusButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                grammarStatusButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 0.33;
        getContentPane().add(grammarStatusButton, gridBagConstraints);

        transformStatusButton.setToolTipText("Click to select transform for transform mode.");
        transformStatusButton.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Transform Chooser", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 13))); // NOI18N
        transformStatusButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        transformStatusButton.setMaximumSize(new java.awt.Dimension(300, 50));
        transformStatusButton.setMinimumSize(new java.awt.Dimension(250, 40));
        transformStatusButton.setPreferredSize(new java.awt.Dimension(300, 40));
        transformStatusButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                transformStatusButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 0.33;
        getContentPane().add(transformStatusButton, gridBagConstraints);

        tempoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tempo (Beats per Minute)", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 12))); // NOI18N
        tempoPanel.setMinimumSize(new java.awt.Dimension(140, 40));
        tempoPanel.setName(""); // NOI18N
        tempoPanel.setPreferredSize(new java.awt.Dimension(140, 40));
        tempoPanel.setLayout(new java.awt.GridBagLayout());

        tempoLabel.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        tempoLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        tempoLabel.setText("120");
        tempoLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tempoLabel.setMaximumSize(new java.awt.Dimension(21, 15));
        tempoLabel.setMinimumSize(new java.awt.Dimension(21, 15));
        tempoLabel.setPreferredSize(new java.awt.Dimension(21, 15));
        tempoLabel.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        tempoPanel.add(tempoLabel, gridBagConstraints);

        tempoSlider.setMaximum(300);
        tempoSlider.setMinimum(30);
        tempoSlider.setValue(120);
        tempoSlider.setMaximumSize(new java.awt.Dimension(150, 30));
        tempoSlider.setMinimumSize(new java.awt.Dimension(150, 30));
        tempoSlider.setPreferredSize(new java.awt.Dimension(190, 30));
        tempoSlider.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                tempoSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.25;
        tempoPanel.add(tempoSlider, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 0.33;
        getContentPane().add(tempoPanel, gridBagConstraints);

        volumePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Response Volume", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 12))); // NOI18N
        volumePanel.setMinimumSize(new java.awt.Dimension(140, 40));
        volumePanel.setName(""); // NOI18N
        volumePanel.setPreferredSize(new java.awt.Dimension(140, 40));
        volumePanel.setLayout(new java.awt.GridBagLayout());

        volumeLabel.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        volumeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        volumeLabel.setText("120");
        volumeLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        volumeLabel.setMaximumSize(new java.awt.Dimension(21, 15));
        volumeLabel.setMinimumSize(new java.awt.Dimension(21, 15));
        volumeLabel.setPreferredSize(new java.awt.Dimension(21, 15));
        volumeLabel.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.2;
        volumePanel.add(volumeLabel, gridBagConstraints);

        volumeSlider.setMaximumSize(new java.awt.Dimension(150, 30));
        volumeSlider.setMinimumSize(new java.awt.Dimension(150, 30));
        volumeSlider.setPreferredSize(new java.awt.Dimension(190, 30));
        volumeSlider.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                volumeSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.25;
        volumePanel.add(volumeSlider, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.weighty = 0.33;
        getContentPane().add(volumePanel, gridBagConstraints);

        controlsPanel.setMaximumSize(new java.awt.Dimension(200, 50));
        controlsPanel.setMinimumSize(new java.awt.Dimension(180, 40));
        controlsPanel.setPreferredSize(new java.awt.Dimension(200, 40));
        controlsPanel.setLayout(new java.awt.GridBagLayout());

        midiPreferencesBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/preferences/smallMidi.png"))); // NOI18N
        midiPreferencesBtn.setToolTipText("Open MIDI Preferences dialog.");
        midiPreferencesBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        midiPreferencesBtn.setFocusable(false);
        midiPreferencesBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        midiPreferencesBtn.setMargin(new java.awt.Insets(0, 0, 0, 0));
        midiPreferencesBtn.setMaximumSize(new java.awt.Dimension(40, 30));
        midiPreferencesBtn.setMinimumSize(new java.awt.Dimension(40, 30));
        midiPreferencesBtn.setPreferredSize(new java.awt.Dimension(40, 30));
        midiPreferencesBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        midiPreferencesBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                midiPreferencesBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 0.33;
        controlsPanel.add(midiPreferencesBtn, gridBagConstraints);

        processTimeSelector.setBackground(new java.awt.Color(238, 238, 238));
        processTimeSelector.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        processTimeSelector.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        processTimeSelector.setText("1.0");
        processTimeSelector.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Processing beats", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 11))); // NOI18N
        processTimeSelector.setMaximumSize(new java.awt.Dimension(140, 50));
        processTimeSelector.setMinimumSize(new java.awt.Dimension(140, 25));
        processTimeSelector.setPreferredSize(new java.awt.Dimension(140, 25));
        processTimeSelector.addCaretListener(new javax.swing.event.CaretListener()
        {
            public void caretUpdate(javax.swing.event.CaretEvent evt)
            {
                processTimeSelectorCaretUpdate(evt);
            }
        });
        processTimeSelector.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                processTimeSelectorFocusLost(evt);
            }
        });
        processTimeSelector.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                processTimeSelectorActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.33;
        controlsPanel.add(processTimeSelector, gridBagConstraints);

        generationGapSpinner.setModel(new javax.swing.SpinnerNumberModel(4.0d, -20.0d, 20.0d, 0.01d));
        generationGapSpinner.setToolTipText("Specifies the lead time, in beats, for generating next chorus before the end of the current chorus.");
        generationGapSpinner.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Lead", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 11))); // NOI18N
        generationGapSpinner.setInheritsPopupMenu(true);
        generationGapSpinner.setMaximumSize(new java.awt.Dimension(80, 45));
        generationGapSpinner.setMinimumSize(new java.awt.Dimension(80, 30));
        generationGapSpinner.setPreferredSize(new java.awt.Dimension(80, 30));
        generationGapSpinner.setValue(0.5);
        generationGapSpinner.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                generationGapSpinnergenerationLeadSpinnerChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.weighty = 0.33;
        controlsPanel.add(generationGapSpinner, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 0.25;
        gridBagConstraints.weighty = 0.4;
        getContentPane().add(controlsPanel, gridBagConstraints);

        playbackControls.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        playbackControls.setMinimumSize(new java.awt.Dimension(261, 30));
        playbackControls.setPreferredSize(new java.awt.Dimension(300, 30));
        playbackControls.setLayout(new java.awt.GridBagLayout());

        countToggle.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        countToggle.setSelected(true);
        countToggle.setText("Count In");
        countToggle.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                countToggleActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        playbackControls.add(countToggle, gridBagConstraints);

        loopToggle.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        loopToggle.setSelected(true);
        loopToggle.setText("Loop");
        loopToggle.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                loopToggleActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        playbackControls.add(loopToggle, gridBagConstraints);

        startOrStopTradingButton.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        startOrStopTradingButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/toolbar/play.gif"))); // NOI18N
        startOrStopTradingButton.setText("Start");
        startOrStopTradingButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        startOrStopTradingButton.setMaximumSize(new java.awt.Dimension(140, 28));
        startOrStopTradingButton.setMinimumSize(new java.awt.Dimension(100, 28));
        startOrStopTradingButton.setPreferredSize(new java.awt.Dimension(100, 28));
        startOrStopTradingButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                startOrStopTradingButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        playbackControls.add(startOrStopTradingButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.25;
        gridBagConstraints.weighty = 0.33;
        getContentPane().add(playbackControls, gridBagConstraints);

        tradeLengthPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Trade length (bars)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 13))); // NOI18N
        tradeLengthPanel.setMaximumSize(new java.awt.Dimension(400, 123));
        tradeLengthPanel.setMinimumSize(new java.awt.Dimension(360, 30));
        tradeLengthPanel.setPreferredSize(new java.awt.Dimension(360, 30));
        tradeLengthPanel.setLayout(new java.awt.GridBagLayout());

        tradeLengthGroup.add(trade1);
        trade1.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        trade1.setText("1");
        trade1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                trade1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        tradeLengthPanel.add(trade1, gridBagConstraints);

        tradeLengthGroup.add(trade2);
        trade2.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        trade2.setLabel("2");
        trade2.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                trade2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        tradeLengthPanel.add(trade2, gridBagConstraints);

        tradeLengthGroup.add(trade4);
        trade4.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        trade4.setSelected(true);
        trade4.setText("4");
        trade4.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                trade4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        tradeLengthPanel.add(trade4, gridBagConstraints);

        tradeLengthGroup.add(trade8);
        trade8.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        trade8.setText("8");
        trade8.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                trade8ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        tradeLengthPanel.add(trade8, gridBagConstraints);

        tradeLengthGroup.add(trade12);
        trade12.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        trade12.setText("12");
        trade12.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                trade12ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        tradeLengthPanel.add(trade12, gridBagConstraints);

        tradeLengthGroup.add(trade16);
        trade16.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        trade16.setLabel("16");
        trade16.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                trade16ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        tradeLengthPanel.add(trade16, gridBagConstraints);

        tradeLengthGroup.add(tradeUseSpinner);
        tradeUseSpinner.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        tradeUseSpinner.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                tradeUseSpinnerActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        tradeLengthPanel.add(tradeUseSpinner, gridBagConstraints);

        tradeLengthSpinner.setModel(new javax.swing.SpinnerNumberModel(16, 1, null, 1));
        tradeLengthSpinner.setToolTipText("The number of bars in melody.");
        tradeLengthSpinner.setMinimumSize(new java.awt.Dimension(50, 30));
        tradeLengthSpinner.setPreferredSize(new java.awt.Dimension(50, 30));
        tradeLengthSpinner.setValue(new Integer(32));
        tradeLengthSpinner.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                tradeLengthSpinnerlengthOfTradeSet(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        tradeLengthPanel.add(tradeLengthSpinner, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.33;
        getContentPane().add(tradeLengthPanel, gridBagConstraints);

        mainTradeMenuBar.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18N

        tradePlayMenu.setText("Play");

        tradePlayMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, 0));
        tradePlayMenuItem.setText("Trade");
        tradePlayMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                tradePlayMenuItemActionPerformed(evt);
            }
        });
        tradePlayMenu.add(tradePlayMenuItem);

        tradeStopMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_K, 0));
        tradeStopMenuItem.setText("Stop");
        tradeStopMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                tradeStopMenuItemActionPerformed(evt);
            }
        });
        tradePlayMenu.add(tradeStopMenuItem);

        mainTradeMenuBar.add(tradePlayMenu);

        modeMenu.setText("Active Mode");

        modeSelector.add(tradeRepeat);
        tradeRepeat.setText("Repeat");
        tradeRepeat.setToolTipText("Simply repeat user input.");
        modeMenu.add(tradeRepeat);

        modeSelector.add(tradeRepeatAndRectify);
        tradeRepeatAndRectify.setText("Repeat and Rectify");
        modeMenu.add(tradeRepeatAndRectify);

        modeSelector.add(tradeRandomModify);
        tradeRandomModify.setText("Modify and Rectify");
        tradeRandomModify.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                tradeRandomModifyActionPerformed(evt);
            }
        });
        modeMenu.add(tradeRandomModify);

        modeSelector.add(tradeAbstract);
        tradeAbstract.setText("Use Abstract Melody");
        modeMenu.add(tradeAbstract);

        modeSelector.add(tradeWithAMusician);
        tradeWithAMusician.setSelected(true);
        tradeWithAMusician.setText("Use Transform");
        modeMenu.add(tradeWithAMusician);
        tradeWithAMusician.getAccessibleContext().setAccessibleDescription("");

        modeSelector.add(tradeGrammarSolo);
        tradeGrammarSolo.setText("Use Grammar");
        modeMenu.add(tradeGrammarSolo);

        modeSelector.add(tradeStore);
        tradeStore.setText("Chop and Memorize");
        modeMenu.add(tradeStore);

        modeSelector.add(MemorizeMotifsMenuItem);
        MemorizeMotifsMenuItem.setText("Memorize Motifs");
        MemorizeMotifsMenuItem.setToolTipText("learns a motif grammar from user");
        MemorizeMotifsMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                MemorizeMotifsMenuItemActionPerformed(evt);
            }
        });
        modeMenu.add(MemorizeMotifsMenuItem);

        modeSelector.add(RhythmHelperMenuItem);
        RhythmHelperMenuItem.setText("Rhythm Helper");
        RhythmHelperMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                RhythmHelperMenuItemActionPerformed(evt);
            }
        });
        modeMenu.add(RhythmHelperMenuItem);

        mainTradeMenuBar.add(modeMenu);

        improvMenu.setText("Passive Mode");

        passiveOptionGroup.add(lstmNetworkRadio);
        lstmNetworkRadio.setText("Use Deep Learning");
        lstmNetworkRadio.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                lstmNetworkRadioActionPerformed(evt);
            }
        });
        improvMenu.add(lstmNetworkRadio);

        passiveOptionGroup.add(grammarRadio);
        grammarRadio.setSelected(true);
        grammarRadio.setText("Use Grammar");
        grammarRadio.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                grammarRadioActionPerformed(evt);
            }
        });
        improvMenu.add(grammarRadio);

        passiveOptionGroup.add(transformRadio);
        transformRadio.setText("Use Grammar & Transform");
        transformRadio.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                transformRadioActionPerformed(evt);
            }
        });
        improvMenu.add(transformRadio);

        passiveOptionGroup.add(grammarDivideRadio);
        grammarDivideRadio.setText("Use Grammar & Divide");
        grammarDivideRadio.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                grammarDivideRadioActionPerformed(evt);
            }
        });
        improvMenu.add(grammarDivideRadio);

        mainTradeMenuBar.add(improvMenu);

        tradeGrammarMenu.setText("Rhythm Cluster");
        mainTradeMenuBar.add(tradeGrammarMenu);

        setJMenuBar(mainTradeMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void userFirstButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userFirstButtonActionPerformed
        updateIsUserLeading();
    }//GEN-LAST:event_userFirstButtonActionPerformed

    private void improvisorFirstButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_improvisorFirstButtonActionPerformed
        updateIsUserLeading();
    }//GEN-LAST:event_improvisorFirstButtonActionPerformed

    private void processTimeSelectorCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_processTimeSelectorCaretUpdate
        updateProcessTime();
    }//GEN-LAST:event_processTimeSelectorCaretUpdate

    private void processTimeSelectorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_processTimeSelectorFocusLost
        updateProcessTimeText();
    }//GEN-LAST:event_processTimeSelectorFocusLost

    private void processTimeSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processTimeSelectorActionPerformed
        updateProcessTimeText();
    }//GEN-LAST:event_processTimeSelectorActionPerformed

    private void volumeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_volumeSliderStateChanged
        updateVolume();
    }//GEN-LAST:event_volumeSliderStateChanged

    private void tempoSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tempoSliderStateChanged
        updateTempo();
    }//GEN-LAST:event_tempoSliderStateChanged
    
    boolean passiveTrading = false;
    
    public void startPassiveTrading() {
        startOrStopTradingButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/toolbar/stop.gif")));
        startOrStopTradingButton.setText("Stop");
        passiveTrading = true;
    }

    public void stopPassiveTrading() {
        startOrStopTradingButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/toolbar/play.gif")));
        startOrStopTradingButton.setText("Start");
        passiveTrading = false;
    }
    
    private void startOrStopTradingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startOrStopTradingButtonActionPerformed
        if( passiveSelected() )
          {
            /*
             * The following applies to passive trading.
             */
            notate.remoteToggleImprovise();
            if( passiveTrading )
              {
                stopPassiveTrading();
              }
            else
              {
                startPassiveTrading();
              }
            return;
          }

        /*
         * The following applies to active trading.
         */
        if( tradingNow )
          {
            if( activeTrading.getTradeMode() instanceof RhythmHelperTRM )
              {
                showUserRhythmSelecterDialog();
              }
            stopActiveTrading();
          }
        else
          {
            if( activeTrading.getTradeMode() instanceof RhythmHelperTRM )
              {
                loopToggle.setVisible(false);
                countToggle.setVisible(false);
                //System.out.println("about to make cancel button visible");
                cancelButton.setVisible(true);
                //System.out.println("cancel button is visible: "+ cancelButton.isVisible());
              }
            startActiveTrading();
          }
    }//GEN-LAST:event_startOrStopTradingButtonActionPerformed

    public void setTradeLength(int value)
    {
        tradeLength = value;
        activeTrading.updateTradeLength("" + value);
    }
    private void loopToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loopToggleActionPerformed
        updateLoop();
    }//GEN-LAST:event_loopToggleActionPerformed

    private void tradeLengthSpinnerlengthOfTradeSet(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tradeLengthSpinnerlengthOfTradeSet
        setTradeLength((Integer)tradeLengthSpinner.getValue());
    }//GEN-LAST:event_tradeLengthSpinnerlengthOfTradeSet

    private void tradeRandomModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tradeRandomModifyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tradeRandomModifyActionPerformed

    private void countToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_countToggleActionPerformed
       updateCountIn();
    }//GEN-LAST:event_countToggleActionPerformed

    private void tradeStopMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tradeStopMenuItemActionPerformed
        stopActiveTrading();
        if(activeTrading.getTradeMode() instanceof RhythmHelperTRM){
            showUserRhythmSelecterDialog();
        }
    }//GEN-LAST:event_tradeStopMenuItemActionPerformed

    private void tradePlayMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tradePlayMenuItemActionPerformed
       startActiveTrading();
    }//GEN-LAST:event_tradePlayMenuItemActionPerformed

    private void activeTradingWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_activeTradingWindowClosed
        stopActiveTrading();
    }//GEN-LAST:event_activeTradingWindowClosed

    private void activeTradingWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_activeTradingWindowClosing
        stopActiveTrading();
    }//GEN-LAST:event_activeTradingWindowClosing

    private void activeTradingShown(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_activeTradingShown
    {//GEN-HEADEREND:event_activeTradingShown
        countToggle.setSelected(notate.getCountIn());
    }//GEN-LAST:event_activeTradingShown

    private void activingTradingHidden(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_activingTradingHidden
    {//GEN-HEADEREND:event_activingTradingHidden
        notate.setCountIn(countToggle.isSelected());
    }//GEN-LAST:event_activingTradingHidden

    private void RhythmHelperMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RhythmHelperMenuItemActionPerformed
        updateTradeMode();
        grammarStatusButton.setVisible(false);
//        QuantizationDialog qd = notate.getQuantizationDialog();
//        qd.unsetQuantization(1);
//        qd.setQuantization(1, 30);
//        qd.setQuantization(0, 30);
//        qd.setTripletQuantizationBoxesOff(80);
//        qd.setNoteQuantizationBoxesOn(30);//set the 16th note quantization box to checked
        LickgenFrame lg = notate.getLickgenFrame();
        lg.uncheckAvoidNotes();
    }//GEN-LAST:event_RhythmHelperMenuItemActionPerformed

    private void MemorizeMotifsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MemorizeMotifsMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MemorizeMotifsMenuItemActionPerformed

    private void grammarStatusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grammarStatusButtonActionPerformed
        notate.openGrammarMenuDialog();
    }//GEN-LAST:event_grammarStatusButtonActionPerformed

    private void transformStatusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transformStatusButtonActionPerformed
        notate.openTransformMenuDialog();     
    }//GEN-LAST:event_transformStatusButtonActionPerformed

    private void generationGapSpinnergenerationLeadSpinnerChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_generationGapSpinnergenerationLeadSpinnerChanged
    {//GEN-HEADEREND:event_generationGapSpinnergenerationLeadSpinnerChanged
        //System.out.println("lickgenFrame = " + lickgenFrame);
        notate.getLickgenFrame().setGap(Double.parseDouble(generationGapSpinner.getValue().toString()));
    }//GEN-LAST:event_generationGapSpinnergenerationLeadSpinnerChanged

    private void activeButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_activeButtonActionPerformed
    {//GEN-HEADEREND:event_activeButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_activeButtonActionPerformed

    private void passiveButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_passiveButtonActionPerformed
    {//GEN-HEADEREND:event_passiveButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passiveButtonActionPerformed

    private void trade4ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_trade4ActionPerformed
    {//GEN-HEADEREND:event_trade4ActionPerformed
        setTradeLength(4);
    }//GEN-LAST:event_trade4ActionPerformed

    private void trade8ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_trade8ActionPerformed
    {//GEN-HEADEREND:event_trade8ActionPerformed
        setTradeLength(8);
    }//GEN-LAST:event_trade8ActionPerformed

    private void trade2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_trade2ActionPerformed
    {//GEN-HEADEREND:event_trade2ActionPerformed
        setTradeLength(2);
    }//GEN-LAST:event_trade2ActionPerformed

    private void trade1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_trade1ActionPerformed
    {//GEN-HEADEREND:event_trade1ActionPerformed
        setTradeLength(1);
    }//GEN-LAST:event_trade1ActionPerformed

    private void lstmNetworkRadioActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_lstmNetworkRadioActionPerformed
    {//GEN-HEADEREND:event_lstmNetworkRadioActionPerformed
        notate.setUseDeepLearning();
    }//GEN-LAST:event_lstmNetworkRadioActionPerformed

    private void grammarRadioActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_grammarRadioActionPerformed
    {//GEN-HEADEREND:event_grammarRadioActionPerformed
        notate.setUseGrammar();
    }//GEN-LAST:event_grammarRadioActionPerformed

    private void transformRadioActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_transformRadioActionPerformed
    {//GEN-HEADEREND:event_transformRadioActionPerformed
        notate.setUseGrammarAndTransform();
    }//GEN-LAST:event_transformRadioActionPerformed

    private void grammarDivideRadioActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_grammarDivideRadioActionPerformed
    {//GEN-HEADEREND:event_grammarDivideRadioActionPerformed
        notate.setUseGrammarAndDivide();
    }//GEN-LAST:event_grammarDivideRadioActionPerformed

    private void recordCheckBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_recordCheckBoxActionPerformed
    {//GEN-HEADEREND:event_recordCheckBoxActionPerformed
        notate.setSaveImprov(recordCheckBox.isSelected());
    }//GEN-LAST:event_recordCheckBoxActionPerformed

    private void trade12ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_trade12ActionPerformed
    {//GEN-HEADEREND:event_trade12ActionPerformed
        setTradeLength(12);
    }//GEN-LAST:event_trade12ActionPerformed

    private void tradeUseSpinnerActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_tradeUseSpinnerActionPerformed
    {//GEN-HEADEREND:event_tradeUseSpinnerActionPerformed
        if( tradeUseSpinner.isSelected() )
          {
            setTradeLength((Integer)tradeLengthSpinner.getValue());
          }
    }//GEN-LAST:event_tradeUseSpinnerActionPerformed

    private void trade16ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_trade16ActionPerformed
    {//GEN-HEADEREND:event_trade16ActionPerformed
        setTradeLength(16);
    }//GEN-LAST:event_trade16ActionPerformed

    private void midiPreferencesBtnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_midiPreferencesBtnActionPerformed
    {//GEN-HEADEREND:event_midiPreferencesBtnActionPerformed
        notate.openMidiPreferences();
        notate.showPreferencesDialog();
    }//GEN-LAST:event_midiPreferencesBtnActionPerformed
    
public void setGenerationGap(double value)
  {
    generationGapSpinner.setValue(0.01 * (int) (100 * value));
  }

public double getGenerationGap()
  {
    return (Double) generationGapSpinner.getValue();
  }

public boolean passiveSelected()
    {
        return passiveButton.isSelected();
    }
    
    public ActiveTrading getActiveTrading()
     {
         return activeTrading;
     }
    
    public int getSlotsPerTurn()
    {
        return activeTrading.getSlotsPerTurn();
    }
    
    public void setTransformStatusButtonText(String musicianName)
    {
        //System.out.println("setTransformStatusButtonText to " + musicianName);
        transformStatusButton.setText(musicianName + "");
    }
     
     public JButton getTransformStatusButton()
     {
         return transformStatusButton;
     }
                                                

    private float tryFloat(String number) {
        float newNumber;
        try {
            newNumber = Float.parseFloat(number);
            isUserInputError = false;
        } catch (Exception e) {
            isUserInputError = true;
            newNumber = 0;
        }
        return newNumber;
    }
        
    public String getTradeModeName(){
        return activeTrading.getTradeModeName();
    }
        
    public void updateGUIComponents() {
        //Integer tradeLength = activeTrading.getMeasures();
        updateProcessTimeText();
        loopToggle.setSelected(activeTrading.getIsLoop());
        int newVol = activeTrading.getVolume();
        volumeSlider.setValue(newVol);
        volumeLabel.setText(newVol + "%");
        userFirstButton.setSelected(activeTrading.getIsUserLeading());
        Double newTempo = activeTrading.getTempo();
        tempoSlider.setValue(newTempo.intValue());
        tempoLabel.setText(newTempo.toString());
        String statusValue = activeTrading.getTradeModeName();
        transformStatusButton.setText("" + activeTrading.getMusician());
        String gramm = activeTrading.getGrammar();
        //tradeGrammarMenu.setText("Grammar:" + gramm);
        tradeGrammarMenu.setVisible(false);
        grammarStatusButton.setText("" + gramm);
    }
    
    public void tradingDialogOpened() {
        activeTrading.setNotateDefaults();
        updateGUIComponents();
        setVisible(true);
        setMenuAndStatusToGrammarOrRhythmCluster(getFromDropDown(modeMenu));
    }

    private void startActiveTrading()
    {
         if (!isUserInputError) {
            updateMusician();
            updateTradeMode();
            
            if(activeTrading.getTradeMode() instanceof CorrectRhythmTRM){
                activeTrading.showGoalsDialog(this);
                 
            }else{  
            activeTrading.startTrading();
            }
            //nnActiveTrading.startActiveTrading();
         }
         tradingNow = true;
         notate.setToTrade();
    }
    
    private void showUserRhythmSelecterDialog(){
        userRhythmSelecterDialog = new UserRhythmSelecterDialog(activeTrading.getTradeMode());
        userRhythmSelecterDialog.setLocation(userRhythmSelecterDialog.INITIAL_OPEN_POINT);
        userRhythmSelecterDialog.setSize(800, 200);
        if(activeTrading.getTradeMode() instanceof CorrectRhythmTRM){
                userRhythmSelecterDialog.showGrade(((RhythmHelperTRM) activeTrading.getTradeMode()).getNumTrades());
        }
        userRhythmSelecterDialog.setVisible(true);
    }
    
    public void stopActiveTrading()
    {
    if( cancelButton.isVisible() )
      {
        loopToggle.setVisible(true);
        countToggle.setVisible(true);
        cancelButton.setVisible(false);
      }

    activeTrading.stopTrading();
    tradingNow = false;
    notate.setNotToTrade();
    }
    
    private void updateProcessTimeText()
    {
        int slotsForProcessing = activeTrading.getSlotsForProcessing();
        if( slotsForProcessing == 1 )
          {
            processTimeSelector.setText("0.0");
          }
        else
          {
            Double newBeatVal = activeTrading.slotsToBeats(slotsForProcessing);
            processTimeSelector.setText(newBeatVal.toString());
          }
    }

    private void updateTradeMode()
    {
        String newMode = getFromDropDown(modeMenu);
        setMenuAndStatusToGrammarOrRhythmCluster(newMode);
        TradingResponseMode tradeMode;
        //make these visible in case one of the trade mode options disabled them
        tradeLengthSpinner.setVisible(true);
        grammarStatusButton.setVisible(true);
        transformStatusButton.setVisible(true);
        userFirstButton.setVisible(true);
        improvisorFirstButton.setVisible(true);
        rhythmHelperModeRadioPanel.setVisible(false);
        switch( newMode )
          {
            case "Repeat":
                tradeMode = new RepeatTRM(newMode);
                break;
            case "Repeat and Rectify":
                tradeMode = new RepeatAndRectifyTRM(newMode);
                break;
            case "Modify and Rectify":
                tradeMode = new ModifyAndRectifyTRM(newMode);
                break;
            case "Use Transform":
                tradeMode = new TransformTRM(newMode);
                break;
            case "Use Abstract Melody":
                tradeMode = new AbstractMelodyTRM(newMode);
                break;
            case "Use Grammar":
                tradeMode = new GrammarTRM(newMode);
                break;
            case "Chop and Memorize":
                tradeMode = new ChopAndMemorizeTRM(newMode);
                break;
            case "Rhythm Helper":
                grammarStatusButton.setVisible(false);
                transformStatusButton.setVisible(false);
                rhythmHelperModeRadioPanel.setVisible(true);
                tradeMode = getRhythmHelperSelectedTRM();
                toggleTradeFirstButtons(tradeMode);
                break;
            case "Memorize Motifs":
                transformStatusButton.setVisible(false);
                tradeMode = new MemorizeMotifsTRM(newMode, notate);
                break;
            default:
                tradeMode = null;
                break;
          }
        activeTrading.setTradeMode(tradeMode);
    }
    
    public boolean getImprovisorTradeFirst()
    {
        return improvisorFirstButton.isSelected();
    }

    private void setMenuAndStatusToGrammarOrRhythmCluster(String tradeMode)
    {
        if( tradeMode.equals("Rhythm Helper") )
          {
            createRhythmClusterMenuAndStatus();
            tradeGrammarMenu.setVisible(true);
          }
        else
          {
            refreshSelectedGrammar("Grammar");
          }
    }
    
    public void createRhythmClusterMenuAndStatus(){
        populateRhythmClusterMenu();
        setGrammarStatusToRhythmCluster();
    }
    
    public void populateRhythmClusterMenu(){
        notate.populateRhythmClusterMenu(tradeGrammarMenu);  
    }
      
    public void setGrammarStatusToRhythmCluster(){
   
        //System.out.println("rhythm cluster name: " + notate.getRhythmClusterName());
        
        ((javax.swing.border.TitledBorder)grammarStatusButton.getBorder()).setTitle("Rhythm Cluster");
        grammarStatusButton.setText(notate.getRhythmClusterName());
        //grammarStatusButton.setText("Rhythm Cluster: " + notate.getRhythmClusterName());
        
        //System.out.println("setting text for trade grammar menu to rhythmCluster....");
        tradeGrammarMenu.setText("Rhythm Cluster");
        //System.out.println("trade grammar menu text is: " + tradeGrammarMenu.getText());
        
    }
    
    public String getClusterFileNameFromPreferences(){
        String rtn = "";
        try{
            rtn = Preferences.getPreferenceQuietly(Preferences.CLUSTER_FILENAME);    
        }catch(NonExistentParameterException e){
            System.out.println("No cluster file name found in preferences!");
        }
        
        return rtn;
    }

    public void setLooping(boolean value)
    {
        loopToggle.setSelected(value);
    }

    private void updateLoop() {
        boolean value = loopToggle.isSelected();
        activeTrading.setLoop(value);
        notate.setLooping(value);
    }
    
    private void updateCountIn() {
      notate.setCountIn(countToggle.isSelected());
    }

    private void updateTempo() {
        Integer tempo = tempoSlider.getValue();
        tempoLabel.setText(tempo.toString());
        activeTrading.setTempo(tempo);
    }

    private void updateMusician() 
    {
        String newMusician = transformMenuDialog.getMusicianName();
        setMusician(newMusician);
    }
    
    public void setMusician(String newMusician)
    {
        activeTrading.setMusician(newMusician);
        transformStatusButton.setText("" + newMusician);        
    }

    private void updateVolume() {
        Integer newVol = volumeSlider.getValue();
        activeTrading.setVolume(newVol);
        volumeLabel.setText(newVol + "%");
    }

    private void updateProcessTime() {
        activeTrading.setProcessTime(tryFloat(processTimeSelector.getText()));
    }

    private void updateIsUserLeading() {
        userFirst = userFirstButton.isSelected();
        activeTrading.setIsUserLeading(userFirst);
        // Force countIn off if Impro-Visor is first
        if( !userFirst )
        {
            countToggle.setSelected(false);
            updateCountIn();
        }
      countToggle.setEnabled(userFirst);
   }

    private String getFromDropDown(JMenu menu) {
        Component[] modes = menu.getMenuComponents();
        String selection = "Use Transform"; // DEFAULT
        for (Component mode : modes) {
            JRadioButtonMenuItem modeButton = (JRadioButtonMenuItem) mode;
            if (modeButton.isSelected()) {
                selection = modeButton.getText();
                //System.out.println(selection);
                return selection;
            }
        }
        return selection;
    }

    public void refreshSelectedRhythmCluster(String gram) {
        //tradeGrammarMenu.setText(gram);
        grammarStatusButton.setText("Rhythm Cluster: " + notate.getRhythmClusterName());
    }

    public void refreshSelectedGrammar(String gram) {
        //tradeGrammarMenu.setText(gram);
        tradeGrammarMenu.setVisible(false);    
        grammarStatusButton.setText("" + activeTrading.getGrammar());
        ((javax.swing.border.TitledBorder)grammarStatusButton.getBorder()).setTitle("Grammar Chooser");
    }

    @Override
    public void tradingStarted() {
        startOrStopTradingButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/toolbar/stop.gif")));
        startOrStopTradingButton.setText("Stop");
    }

    @Override
    public void tradingStopped() {
        startOrStopTradingButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/toolbar/play.gif")));
        startOrStopTradingButton.setText("Start");
    }

    public void trackPlay(ActionEvent e) {
        activeTrading.trackPlay(e);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        updateMusician();
        updateTradeMode();
    }

    public int getUpdatedTradeLength() {
        return activeTrading.getMeasures();
    }
     private void addRhythmHelperModeRadioPanel(){
        GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        rhythmHelperModeRadioPanel.setVisible(false);
    }
    
    private JPanel createRhythmHelperModeRadioPanel(){
        JPanel radioButtonMenuPanel = new JPanel();
        radioButtonMenuPanel.setLayout(new BoxLayout(radioButtonMenuPanel, BoxLayout.LINE_AXIS));
        
        ButtonGroup group = new ButtonGroup();
        
        suggestRhythmRadioButton = new JRadioButton("suggestive", true);
        correctRhythmRadioButton = new JRadioButton("corrective", false);
        group.add(suggestRhythmRadioButton);
        group.add(correctRhythmRadioButton);
        
        radioButtonMenuPanel.add(suggestRhythmRadioButton);
        radioButtonMenuPanel.add(correctRhythmRadioButton);        
        
        addRhythmRadioButtonActionListeners();
        
        return radioButtonMenuPanel;
    }
    
    private void addRhythmRadioButtonActionListeners(){
        
        suggestRhythmRadioButton.addActionListener(new ActionListener(){
          @Override
          public void actionPerformed(ActionEvent e){
//              System.out.println("\n\ncalling action listener for suggestRhythmRadioButton");
//              System.out.println("correctRhythmRadioButton selected? " + correctRhythmRadioButton.isSelected());
//              System.out.println("suggestRhythmRadioButton selected? " + suggestRhythmRadioButton.isSelected());
            if(suggestRhythmRadioButton.isSelected()){
                activeTrading.setTradeMode(new SuggestRhythmTRM("Suggest Rhythm"));
                toggleTradeFirstButtons(activeTrading.getTradeMode());
            }
          }   
        } );
        
        correctRhythmRadioButton.addActionListener(new ActionListener(){
          @Override
          public void actionPerformed(ActionEvent e){
//              System.out.println("\n\ncalling action listener for correctRhythmRadioButton");
//              System.out.println("correctRhythmRadioButton selected? " + correctRhythmRadioButton.isSelected());
//              System.out.println("suggestRhythmRadioButton selected? " + suggestRhythmRadioButton.isSelected());
            if(correctRhythmRadioButton.isSelected()){
                activeTrading.setTradeMode(new CorrectRhythmTRM("Correct Rhythm"));
                toggleTradeFirstButtons(activeTrading.getTradeMode());
            }
          }   
        } );
    }
    
    private JButton createCancelButton(){
        JButton cButton = new JButton("Cancel");
        cButton.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        cButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        cButton.setMaximumSize(new java.awt.Dimension(140, 28));
        cButton.setMinimumSize(new java.awt.Dimension(140, 28));
        cButton.setPreferredSize(new java.awt.Dimension(140, 28));
        ImageIcon icon = new javax.swing.ImageIcon(getClass().getResource("/graphics/redX.png"));
        Image img = icon.getImage() ;  
        Image newimg = img.getScaledInstance( 20, 20,  java.awt.Image.SCALE_SMOOTH ) ;  
        icon = new ImageIcon( newimg );
        cButton.setIcon(icon); // NOI18N
        cButton.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e){
                if(tradingNow){
                    stopActiveTrading();
                }
            }
        });
    
        cButton.setVisible(false);
        
        return cButton;
    }
    
    private TradingResponseMode getRhythmHelperSelectedTRM(){
        if(suggestRhythmRadioButton.isSelected()){
            return (new SuggestRhythmTRM("Suggest Rhythm"));
        }else{
            return (new CorrectRhythmTRM("Correct Rhythm"));
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButtonMenuItem MemorizeMotifsMenuItem;
    private javax.swing.JRadioButtonMenuItem RhythmHelperMenuItem;
    private javax.swing.JRadioButton activeButton;
    private javax.swing.ButtonGroup activePassiveGroup;
    private javax.swing.JPanel activePassivePanel;
    private javax.swing.JPanel controlsPanel;
    private javax.swing.JCheckBox countToggle;
    private javax.swing.JSpinner generationGapSpinner;
    private javax.swing.JRadioButtonMenuItem grammarDivideRadio;
    private javax.swing.ButtonGroup grammarGroup;
    private javax.swing.JRadioButtonMenuItem grammarRadio;
    private javax.swing.JButton grammarStatusButton;
    private javax.swing.JMenu improvMenu;
    private javax.swing.JRadioButton improvisorFirstButton;
    private javax.swing.JPanel leadSelectors;
    private javax.swing.ButtonGroup leadingSelector;
    private javax.swing.JCheckBox loopToggle;
    private javax.swing.JRadioButtonMenuItem lstmNetworkRadio;
    private javax.swing.JMenuBar mainTradeMenuBar;
    private javax.swing.JButton midiPreferencesBtn;
    private javax.swing.JMenu modeMenu;
    private javax.swing.ButtonGroup modeSelector;
    private javax.swing.JPanel optionsPanel;
    private javax.swing.JRadioButton passiveButton;
    private javax.swing.ButtonGroup passiveOptionGroup;
    private javax.swing.JPanel playbackControls;
    private javax.swing.JTextField processTimeSelector;
    private javax.swing.JCheckBox recordCheckBox;
    private javax.swing.JButton startOrStopTradingButton;
    private javax.swing.JLabel tempoLabel;
    private javax.swing.JPanel tempoPanel;
    private javax.swing.JSlider tempoSlider;
    private javax.swing.JRadioButton trade1;
    private javax.swing.JRadioButton trade12;
    private javax.swing.JRadioButton trade16;
    private javax.swing.JRadioButton trade2;
    private javax.swing.JRadioButton trade4;
    private javax.swing.JRadioButton trade8;
    private javax.swing.JRadioButtonMenuItem tradeAbstract;
    private javax.swing.JMenu tradeGrammarMenu;
    private javax.swing.JRadioButtonMenuItem tradeGrammarSolo;
    private javax.swing.ButtonGroup tradeLengthGroup;
    private javax.swing.JPanel tradeLengthPanel;
    private javax.swing.JSpinner tradeLengthSpinner;
    private javax.swing.JMenu tradePlayMenu;
    private javax.swing.JMenuItem tradePlayMenuItem;
    private javax.swing.JRadioButtonMenuItem tradeRandomModify;
    private javax.swing.JRadioButtonMenuItem tradeRepeat;
    private javax.swing.JRadioButtonMenuItem tradeRepeatAndRectify;
    private javax.swing.JMenuItem tradeStopMenuItem;
    private javax.swing.JRadioButtonMenuItem tradeStore;
    private javax.swing.JRadioButton tradeUseSpinner;
    private javax.swing.JRadioButtonMenuItem tradeWithAMusician;
    private javax.swing.ButtonGroup transformFileSelector;
    private javax.swing.JRadioButtonMenuItem transformRadio;
    private javax.swing.JButton transformStatusButton;
    private javax.swing.JRadioButton userFirstButton;
    private javax.swing.JLabel volumeLabel;
    private javax.swing.JPanel volumePanel;
    private javax.swing.JSlider volumeSlider;
    private javax.swing.JPanel whoFirstPanel;
    // End of variables declaration//GEN-END:variables

    private void toggleTradeFirstButtons(TradingResponseMode tradeMode) {
        if(tradeMode instanceof SuggestRhythmTRM){
            userFirstButton.setSelected(true);
            updateIsUserLeading();
//            System.out.println("selected suggest rhythm, userFirstButton selected: " + userFirstButton.isSelected() + 
//                    ", improfirstBtn selected: " + improvisorFirstButton.isSelected());
            userFirstButton.setVisible(true);
            improvisorFirstButton.setVisible(false);  
        }else{
            improvisorFirstButton.setSelected(true);
            updateIsUserLeading();

//            System.out.println("selected correct rhythm, userFirstButton selected: " + userFirstButton.isSelected() + 
//                    ", improfirstBtn selected: " + improvisorFirstButton.isSelected());
            improvisorFirstButton.setVisible(true);
            userFirstButton.setVisible(false);
        }
    }
    
    public JRadioButton getCorrectRhythmRadioButton(){
        return correctRhythmRadioButton;
    }
    
}
