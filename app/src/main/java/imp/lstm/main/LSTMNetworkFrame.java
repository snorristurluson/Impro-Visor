/**
 * This Java Class is part of the Impro-Visor Application.
 *
 * Copyright (C) 2016-2017 Robert Keller and Harvey Mudd College
 *
 * Impro-Visor is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 *
 * Impro-Visor is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of merchantability or fitness
 * for a particular purpose. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * Impro-Visor; if not, write to the Free Software Foundation, Inc., 51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301 USA
 */

package imp.lstm.main;
import imp.lstm.architecture.InvalidParametersException;
import imp.ImproVisor;
import imp.gui.Notate;
import imp.gui.WindowRegistry;
import imp.util.NonExistentParameterException;
import imp.util.Preferences;
import java.io.File;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import javax.swing.JFileChooser;
import imp.lstm.io.leadsheet.Constants;
/**
 *
 * @author cssummer16
 */
public class LSTMNetworkFrame extends javax.swing.JDialog {
    
    private LSTMGen lstmGen;
    private Notate notate;
    private File paramfile;
    
    /**
     * Creates new form LSTMNetworkFrame
     */
    public LSTMNetworkFrame(Notate n, LSTMGen gen) {
        notate = n;
        lstmGen = gen;
        initComponents();
        
        paramFileChooser.setCurrentDirectory(ImproVisor.getConnectomeDirectory());
        try {
            String lastPrefPathString = Preferences.getPreferenceQuietly(Preferences.LSTM_GEN_PARAMS);
            Path lastPrefPath = FileSystems.getDefault().getPath(lastPrefPathString);
            Path referencePath = ImproVisor.getConnectomeDirectory().toPath();
            paramfile = referencePath.resolve(lastPrefPath).toFile();
            filePathLabel.setText(paramfile.getAbsolutePath());
            load();
            updatePostprocessing(null);
        } catch (NonExistentParameterException ex) {
            paramfile = null;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        paramFileChooser = new javax.swing.JFileChooser();
        generationTimeButtonGroup = new javax.swing.ButtonGroup();
        restLimitingGroup = new javax.swing.ButtonGroup();
        statusPanel = new javax.swing.JPanel();
        statusLabel = new javax.swing.JLabel();
        statusSeparator = new javax.swing.JSeparator();
        infoLabel = new javax.swing.JLabel();
        statusFiller = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0));
        settingsPanel = new javax.swing.JPanel();
        aheadOfTimeRadio = new javax.swing.JRadioButton();
        justInTimeRadio = new javax.swing.JRadioButton();
        genModeLabel = new javax.swing.JLabel();
        riskLevelLabel = new javax.swing.JLabel();
        expertWeightingLabel = new javax.swing.JLabel();
        riskLevelSlider = new javax.swing.JSlider();
        expertWeightingSlider = new javax.swing.JSlider();
        conservativeLabel = new javax.swing.JLabel();
        adventurousLabel = new javax.swing.JLabel();
        contourLabel = new javax.swing.JLabel();
        pitchLabel = new javax.swing.JLabel();
        restLimitingLabel = new javax.swing.JLabel();
        restLimitNoneRadio = new javax.swing.JRadioButton();
        restLimitForceRadio = new javax.swing.JRadioButton();
        restLimitResetRadio = new javax.swing.JRadioButton();
        resetOptionPanel = new javax.swing.JPanel();
        maxRestLengthLabel = new javax.swing.JLabel();
        maxRestLength = new javax.swing.JComboBox<>();
        rectificationLabel = new javax.swing.JLabel();
        rectifyCheckbox = new javax.swing.JCheckBox();
        colorTonesCheckbox = new javax.swing.JCheckBox();
        mergeRepeatedCheckbox = new javax.swing.JCheckBox();
        paramPanel = new javax.swing.JPanel();
        filePathLabel = new javax.swing.JLabel();
        browseButton = new javax.swing.JButton();

        paramFileChooser.setAcceptAllFileFilterUsed(false);
        paramFileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Network connectome file", "ctome"));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Deep Learning Control Panel");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        statusPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Status"));
        statusPanel.setLayout(new java.awt.GridBagLayout());

        statusLabel.setText("<html>The network parameters are not loaded.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 10);
        statusPanel.add(statusLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        statusPanel.add(statusSeparator, gridBagConstraints);

        infoLabel.setText("<html>To load a connectome, click <i>Load</i>, select a connectome file (extension .ctome), and then click <i>Open</i>.");
        infoLabel.setToolTipText("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 5, 10);
        statusPanel.add(infoLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        statusPanel.add(statusFiller, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        getContentPane().add(statusPanel, gridBagConstraints);

        settingsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Generation Settings"));
        settingsPanel.setLayout(new java.awt.GridBagLayout());

        generationTimeButtonGroup.add(aheadOfTimeRadio);
        aheadOfTimeRadio.setText("Ahead of time (safer)");
        aheadOfTimeRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aheadOfTimeRadioActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        settingsPanel.add(aheadOfTimeRadio, gridBagConstraints);

        generationTimeButtonGroup.add(justInTimeRadio);
        justInTimeRadio.setSelected(true);
        justInTimeRadio.setText("Just in time (faster)");
        justInTimeRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                justInTimeRadioActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        settingsPanel.add(justInTimeRadio, gridBagConstraints);

        genModeLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        genModeLabel.setText("Generation Mode");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        settingsPanel.add(genModeLabel, gridBagConstraints);

        riskLevelLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        riskLevelLabel.setText("Risk Level");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        settingsPanel.add(riskLevelLabel, gridBagConstraints);

        expertWeightingLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        expertWeightingLabel.setText("Expert Weighting");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        settingsPanel.add(expertWeightingLabel, gridBagConstraints);

        riskLevelSlider.setMajorTickSpacing(50);
        riskLevelSlider.setMinorTickSpacing(10);
        riskLevelSlider.setPaintTicks(true);
        riskLevelSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                updateProbabilityScaling(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        settingsPanel.add(riskLevelSlider, gridBagConstraints);

        expertWeightingSlider.setMajorTickSpacing(50);
        expertWeightingSlider.setMinorTickSpacing(10);
        expertWeightingSlider.setPaintTicks(true);
        expertWeightingSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                updateProbabilityScaling(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        settingsPanel.add(expertWeightingSlider, gridBagConstraints);

        conservativeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        conservativeLabel.setText("Conservative");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        settingsPanel.add(conservativeLabel, gridBagConstraints);

        adventurousLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        adventurousLabel.setText("Adventurous");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        settingsPanel.add(adventurousLabel, gridBagConstraints);

        contourLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        contourLabel.setText("Contour");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        settingsPanel.add(contourLabel, gridBagConstraints);

        pitchLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        pitchLabel.setText("Pitch");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        settingsPanel.add(pitchLabel, gridBagConstraints);

        restLimitingLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        restLimitingLabel.setText("Rest Limiting");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        settingsPanel.add(restLimitingLabel, gridBagConstraints);

        restLimitingGroup.add(restLimitNoneRadio);
        restLimitNoneRadio.setText("Don't limit rests");
        restLimitNoneRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatePostprocessing(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        settingsPanel.add(restLimitNoneRadio, gridBagConstraints);

        restLimitingGroup.add(restLimitForceRadio);
        restLimitForceRadio.setSelected(true);
        restLimitForceRadio.setText("Force network to play a note after long rest");
        restLimitForceRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatePostprocessing(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        settingsPanel.add(restLimitForceRadio, gridBagConstraints);

        restLimitingGroup.add(restLimitResetRadio);
        restLimitResetRadio.setText("Reset network on next bar after long rest");
        restLimitResetRadio.setToolTipText("");
        restLimitResetRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatePostprocessing(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        settingsPanel.add(restLimitResetRadio, gridBagConstraints);

        resetOptionPanel.setLayout(new java.awt.GridBagLayout());

        maxRestLengthLabel.setText("Rest limit length: ");
        resetOptionPanel.add(maxRestLengthLabel, new java.awt.GridBagConstraints());

        maxRestLength.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Quarter rest", "Half rest", "1 bar rest", "2 bar rest", "4 bar rest" }));
        maxRestLength.setSelectedIndex(2);
        maxRestLength.setEnabled(false);
        maxRestLength.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatePostprocessing(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.1;
        resetOptionPanel.add(maxRestLength, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        settingsPanel.add(resetOptionPanel, gridBagConstraints);

        rectificationLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        rectificationLabel.setText("Rectification");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        settingsPanel.add(rectificationLabel, gridBagConstraints);

        rectifyCheckbox.setSelected(true);
        rectifyCheckbox.setText("Rectify network output");
        rectifyCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatePostprocessing(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        settingsPanel.add(rectifyCheckbox, gridBagConstraints);

        colorTonesCheckbox.setSelected(true);
        colorTonesCheckbox.setText("Allow color tones");
        colorTonesCheckbox.setEnabled(false);
        colorTonesCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatePostprocessing(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        settingsPanel.add(colorTonesCheckbox, gridBagConstraints);

        mergeRepeatedCheckbox.setSelected(true);
        mergeRepeatedCheckbox.setText("Merge repeated pitches");
        mergeRepeatedCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatePostprocessing(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        settingsPanel.add(mergeRepeatedCheckbox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        getContentPane().add(settingsPanel, gridBagConstraints);

        paramPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Network Parameters"));
        paramPanel.setLayout(new java.awt.GridBagLayout());

        filePathLabel.setText("No connectome file selected.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        paramPanel.add(filePathLabel, gridBagConstraints);

        browseButton.setText("Load");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        paramPanel.add(browseButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        getContentPane().add(paramPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        int dialogResult = paramFileChooser.showOpenDialog(this);
        if(dialogResult == JFileChooser.APPROVE_OPTION){
            paramfile = paramFileChooser.getSelectedFile();
            filePathLabel.setText(paramfile.getAbsolutePath());
            Preferences.setPreference(Preferences.LSTM_GEN_PARAMS, paramfile.getAbsolutePath());
            load();
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    private void aheadOfTimeRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aheadOfTimeRadioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_aheadOfTimeRadioActionPerformed

    private void justInTimeRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_justInTimeRadioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_justInTimeRadioActionPerformed

    private void updateProbabilityScaling(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_updateProbabilityScaling
        double riskLevel = ((double) riskLevelSlider.getValue() - 50.0)/25.0;
        double expertWeights = ((double) expertWeightingSlider.getValue() - 50.0)/50.0;
        lstmGen.setProbabilityAdjust(riskLevel, expertWeights);
    }//GEN-LAST:event_updateProbabilityScaling

    private void updatePostprocessing(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatePostprocessing
        maxRestLength.setEnabled(!restLimitNoneRadio.isSelected());
        colorTonesCheckbox.setEnabled(rectifyCheckbox.isSelected());
        
        int restLen = Constants.QUARTER;
        for(int i = maxRestLength.getSelectedIndex(); i > 0; i--)
            restLen *= 2;
        lstmGen.setPostprocess( rectifyCheckbox.isSelected(),
                                colorTonesCheckbox.isSelected(),
                                mergeRepeatedCheckbox.isSelected(),
                                restLimitResetRadio.isSelected(),
                                restLimitForceRadio.isSelected(),
                                restLen );
    }//GEN-LAST:event_updatePostprocessing

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        closeWindow();
    }//GEN-LAST:event_formWindowClosed

    private void load() {
        browseButton.setEnabled(false);
        statusLabel.setText("Loading parameters file...");
        notate.setLSTMModeEnabled(false);
        if (paramfile == null) {
            throw new RuntimeException("Parameters file was null! Can't load!");
        }
        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    lstmGen.loadFromPath(paramfile.getAbsolutePath());
                    statusLabel.setText("<html>Network parameters loaded successfully!");
                    notate.setLSTMModeEnabled(true);
                } catch (InvalidParametersException ex) {
                    statusLabel.setText("<html>Could not load the parameters file. " + ex.getMessage());
                } catch (IOException ex) {
                    statusLabel.setText("<html>Could not load the parameters file. There was a problem opening the file. Make sure the file is still in the correct location.");
                } catch (Exception ex) {
                    ex.printStackTrace();
                    statusLabel.setText("<html>Could not load the parameters file. There was a problem parsing the file. It is possible that the parameters are malformed.");
                }
                browseButton.setEnabled(true);
            }
            
        }).start();
    }
    
    public void closeWindow() {
        this.setVisible(false);
        WindowRegistry.unregisterWindow(this);
    }
    
    public boolean justInTimeGenerationEnabled(){
        return justInTimeRadio.isSelected();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel adventurousLabel;
    private javax.swing.JRadioButton aheadOfTimeRadio;
    private javax.swing.JButton browseButton;
    private javax.swing.JCheckBox colorTonesCheckbox;
    private javax.swing.JLabel conservativeLabel;
    private javax.swing.JLabel contourLabel;
    private javax.swing.JLabel expertWeightingLabel;
    private javax.swing.JSlider expertWeightingSlider;
    private javax.swing.JLabel filePathLabel;
    private javax.swing.JLabel genModeLabel;
    private javax.swing.ButtonGroup generationTimeButtonGroup;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JRadioButton justInTimeRadio;
    private javax.swing.JComboBox<String> maxRestLength;
    private javax.swing.JLabel maxRestLengthLabel;
    private javax.swing.JCheckBox mergeRepeatedCheckbox;
    private javax.swing.JFileChooser paramFileChooser;
    private javax.swing.JPanel paramPanel;
    private javax.swing.JLabel pitchLabel;
    private javax.swing.JLabel rectificationLabel;
    private javax.swing.JCheckBox rectifyCheckbox;
    private javax.swing.JPanel resetOptionPanel;
    private javax.swing.JRadioButton restLimitForceRadio;
    private javax.swing.JRadioButton restLimitNoneRadio;
    private javax.swing.JRadioButton restLimitResetRadio;
    private javax.swing.ButtonGroup restLimitingGroup;
    private javax.swing.JLabel restLimitingLabel;
    private javax.swing.JLabel riskLevelLabel;
    private javax.swing.JSlider riskLevelSlider;
    private javax.swing.JPanel settingsPanel;
    private javax.swing.Box.Filler statusFiller;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JSeparator statusSeparator;
    // End of variables declaration//GEN-END:variables
}
