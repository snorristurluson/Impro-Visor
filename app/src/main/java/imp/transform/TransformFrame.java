/**
 * This Java Class is part of the Impro-Visor Application.
 *
 * Copyright (C) 2005-2017 Robert Keller and Harvey Mudd College.
 *
 * Impro-Visor is free software; you can redistribute it and/or modifyc it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 *
 * Impro-Visor is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of merchantability or fitness
 * for a particular purpose. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * Impro-Visor; if not, write to the Free Software Foundation, Inc., 51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301 USA
 */

/*
 * TransformFrame.java
 *
 * Created on July 27, 2015, 4:57:53 PM
 */
package imp.transform;

import imp.com.*;
import imp.data.*;
import imp.gui.Notate;
import imp.gui.WindowMenuItem;
import imp.gui.WindowRegistry;
import imp.lickgen.LickGen;
import java.awt.*;
import java.io.*;
import java.util.ArrayList;
import javax.swing.*;
import polya.Polylist;
import polya.Tokenizer;

/**
 * @author Alex Putman
  */
public class TransformFrame
        extends javax.swing.JDialog
        implements imp.Constants {

    private int themeLength = 8;
    private double themeProb = 0.4;
    private double transposeProb = 0.5;
    private double invertProb = 0.1;
    private double reverseProb = 0.1;
    private Notate notate;
    private ArrayList<String> melodyData = new ArrayList<String>();
    private int minPitch = 60;
    private int maxPitch = 82;
    private int minInterval = 0;
    private int maxInterval = 6;
    private int minDuration = 8;
    private int maxDuration = 8;
    private double totalBeats = 8;
    private double restProb = 0.1;
    private double leapProb = 0.2;
    private double chordToneWeight = 0.7;
    private double scaleToneWeight = 0.1;
    private double colorToneWeight = 0.05;
    private double chordToneDecayRate = 0.1;
    private boolean avoidRepeats = true;
    private boolean useGrammar = true;
    private boolean autoFill = true;
    private int recurrentIteration = 1;
    private LickGen lickgen;
    private CommandManager cm;

    /**
     * Number of beats per measure in the piece
     */
    private int beatsPerBar;
    /**
     * Total number of beats to represent in the solo curve graph
     */
    private int attrTotal;
    /**
     * Granularity at which to look at the bars, i.e. how many beats per
     * division
     */
    private int attrGranularity;
    /**
 
 
    /**
     * ArrayList of JTextField arrays, used to display probabilities used in
     * lick generation
     */
    private ArrayList<JTextField[]> lickPrefs = new ArrayList<JTextField[]>();
    /**
     * this will be set to true during extraction of all measures in a corpus
     */
    private boolean allMeasures = false;


    /**
     * Create the panel for the transform
     */
    private TransformPanel transformTab;
    /**
     * Create the panel for flatten
     */
    private TransformLearningPanel transformLearningTab;
   
    /**
     * Creates new LickgenFrame
     */
    public TransformFrame(Notate notate, LickGen lickgen, CommandManager cm) {
        this.notate = notate;
        this.lickgen = lickgen;
        this.cm = cm;

        beatsPerBar = notate.getBeatsPerMeasure();
        attrTotal = 288; //max size of a selection (one chorus)
        attrGranularity = 1; //default

        initComponents();

        transformTab = new TransformPanel(notate);
        transformPanel.add(transformTab, new GridLayout(1, 1, 1, 1));
        
        transformLearningTab = new TransformLearningPanel(notate, transformTab);
        transformLearningPanel.add(transformLearningTab, new GridLayout(1, 1, 1, 1));
        }

    public void applySubstitutions(MelodyPart melody, ChordPart chords) {
        transformTab.applySubstitutionsToPart(melody, chords);
    }

    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        transformPane = new javax.swing.JTabbedPane();
        transformPanel = new javax.swing.JPanel();
        transformLearningPanel = new javax.swing.JPanel();
        transformMenuBar = new javax.swing.JMenuBar();
        grammarMenu1 = new javax.swing.JMenu();
        openMI = new javax.swing.JMenuItem();
        newMI = new javax.swing.JMenuItem();
        saveMI = new javax.swing.JMenuItem();
        addFromMI = new javax.swing.JMenuItem();
        generatorWindowMenu1 = new javax.swing.JMenu();
        closeWindowMI2 = new javax.swing.JMenuItem();
        cascadeMI2 = new javax.swing.JMenuItem();
        windowMenuSeparator2 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Transform Controls");
        setMinimumSize(new java.awt.Dimension(1000, 850));
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosed(java.awt.event.WindowEvent evt)
            {
                closeWindow(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        transformPane.setBackground(new java.awt.Color(218, 215, 215));
        transformPane.setMinimumSize(new java.awt.Dimension(1200, 700));
        transformPane.setPreferredSize(new java.awt.Dimension(1200, 700));

        transformPanel.setMinimumSize(new java.awt.Dimension(32767, 32767));
        transformPanel.setPreferredSize(new java.awt.Dimension(0, 0));
        transformPanel.setLayout(new java.awt.GridLayout(1, 0));
        transformPane.addTab("Transform", transformPanel);

        transformLearningPanel.setLayout(new java.awt.GridLayout(1, 0));
        transformPane.addTab("Transform Learning", transformLearningPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(transformPane, gridBagConstraints);

        transformMenuBar.setMinimumSize(new java.awt.Dimension(115, 23));

        grammarMenu1.setMnemonic('G');
        grammarMenu1.setText("File");
        grammarMenu1.setToolTipText("Edit or change the current grammar file.");
        grammarMenu1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                grammarMenu1ActionPerformed(evt);
            }
        });

        openMI.setText("Open");
        openMI.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                openMIActionPerformed(evt);
            }
        });
        grammarMenu1.add(openMI);

        newMI.setText("New");
        newMI.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                newMIActionPerformed(evt);
            }
        });
        grammarMenu1.add(newMI);

        saveMI.setText("Save");
        saveMI.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                saveMIActionPerformed(evt);
            }
        });
        grammarMenu1.add(saveMI);

        addFromMI.setText("Add From...");
        addFromMI.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                addFromMIActionPerformed(evt);
            }
        });
        grammarMenu1.add(addFromMI);

        transformMenuBar.add(grammarMenu1);

        generatorWindowMenu1.setLabel("Window");
        generatorWindowMenu1.addMenuListener(new javax.swing.event.MenuListener()
        {
            public void menuSelected(javax.swing.event.MenuEvent evt)
            {
                generatorWindowMenu1MenuSelected(evt);
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt)
            {
            }
            public void menuCanceled(javax.swing.event.MenuEvent evt)
            {
            }
        });

        closeWindowMI2.setMnemonic('C');
        closeWindowMI2.setText("Close Window");
        closeWindowMI2.setToolTipText("Closes the current window (exits program if there are no other windows)");
        closeWindowMI2.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                closeWindowMI2ActionPerformed(evt);
            }
        });
        generatorWindowMenu1.add(closeWindowMI2);

        cascadeMI2.setMnemonic('A');
        cascadeMI2.setText("Cascade Windows");
        cascadeMI2.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cascadeMI2ActionPerformed(evt);
            }
        });
        generatorWindowMenu1.add(cascadeMI2);
        generatorWindowMenu1.add(windowMenuSeparator2);

        transformMenuBar.add(generatorWindowMenu1);

        setJMenuBar(transformMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents


    /**
     * Interface to fillMelody in LickGen
     * @param beatValue
     * @param rhythmString
     * @param chordProg
     * @param start
     * @return 
     */
    public MelodyPart fillMelody(int beatValue,
                                 Polylist rhythmString,
                                 ChordPart chordProg,
                                 int start) 
      {
        //debug System.out.println("LickgenFrame: fillMelody");

        MelodyPart result = lickgen.fillMelody(minPitch,
                maxPitch,
                minInterval,
                maxInterval,
                beatValue,
                leapProb,
                rhythmString,
                chordProg,
                start,
                avoidRepeats);

        //debug System.out.println("fillMelody returns");
        return result;
    }

    public void stopPlaying() {
        notate.stopPlaying();
    }

                        private void grammarMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grammarMenu1ActionPerformed
                            // TODO add your handling code here:
                        }//GEN-LAST:event_grammarMenu1ActionPerformed

                        private void closeWindowMI2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeWindowMI2ActionPerformed
                            closeWindow();
                        }//GEN-LAST:event_closeWindowMI2ActionPerformed
    public void closeWindow() {
        this.setVisible(false);

        WindowRegistry.unregisterWindow(this);
    }


                        private void cascadeMI2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cascadeMI2ActionPerformed
                            WindowRegistry.cascadeWindows(this);
                        }//GEN-LAST:event_cascadeMI2ActionPerformed

                        private void generatorWindowMenu1MenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_generatorWindowMenu1MenuSelected

                            generatorWindowMenu1.removeAll();

                            generatorWindowMenu1.add(closeWindowMI2);

                            generatorWindowMenu1.add(cascadeMI2);

                            generatorWindowMenu1.add(windowMenuSeparator2);

                            for (WindowMenuItem w : WindowRegistry.getWindows()) {

                                generatorWindowMenu1.add(w.getMI(this));      // these are static, and calling getMI updates the name on them too in case the window title changed
                            }

                            generatorWindowMenu1.repaint();

                        }//GEN-LAST:event_generatorWindowMenu1MenuSelected

                        private void closeWindow(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeWindow
                            closeWindow();
                        }//GEN-LAST:event_closeWindow

    private void openMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMIActionPerformed
        transformTab.open();
    }//GEN-LAST:event_openMIActionPerformed

    private void newMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMIActionPerformed
        transformTab.newFile();
    }//GEN-LAST:event_newMIActionPerformed

    private void saveMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMIActionPerformed
        transformTab.saveCurrentTransform();
    }//GEN-LAST:event_saveMIActionPerformed

    private void addFromMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFromMIActionPerformed
        transformTab.addSubs();
    }//GEN-LAST:event_addFromMIActionPerformed

/**
 * Fill an abstract or relative-pitch melody from text, such as acquired from
 * either abstract melody or relative pitch melody field.
 * If the text is not already a Polylist, this will first make a Polylist
 * out of it.
 *
 * @param r
 */
public void fillMelodyFromText(String r)
  {
    r = r.trim();
    if( r.equals("") )
      {
        return; // no text specified
      }
    if( r.charAt(0) != '(' )
      {
        r = "(".concat(r);
      }

    if( r.charAt(r.length() - 1) != ')' )
      {
        r = r.concat(")");
      }

    Polylist rhythm = new Polylist();
    StringReader rhythmReader = new StringReader(r);
    Tokenizer in = new Tokenizer(rhythmReader);
    Object ob;

    while( (ob = in.nextSexp()) != Tokenizer.eof )
      {
        if( ob instanceof Polylist )
          {
            rhythm = (Polylist) ob;
          }
      }

    notate.generateAndPutLick(rhythm);
  }

public MelodyPart fillAndReturnMelodyFromText(String r, ChordPart chordPart)
  {
    r = r.trim();
    if( r.equals("") )
      {
        return new MelodyPart(); // no text specified
      }
    if( r.charAt(0) != '(' )
      {
        r = "(".concat(r);
      }

    if( r.charAt(r.length() - 1) != ')' )
      {
        r = r.concat(")");
      }

    Polylist rhythm = new Polylist();
    StringReader rhythmReader = new StringReader(r);
    Tokenizer in = new Tokenizer(rhythmReader);
    Object ob;

    while( (ob = in.nextSexp()) != Tokenizer.eof )
      {
        if( ob instanceof Polylist )
          {
            rhythm = (Polylist) ob;
          }
      }

    return notate.generateLick(rhythm, chordPart);
  }

    private boolean saveImp = false;
    public void setSaveImp(boolean value)
    {
        saveImp = value;
    }
    public boolean shouldSaveImp(){
        return saveImp;
    }

    // Return min duration text field
    public int getMinDuration() {
        return minDuration;
    }

    // Return max duration text field
    public int getMaxDuration() {
        return maxDuration;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem addFromMI;
    private javax.swing.JMenuItem cascadeMI2;
    private javax.swing.JMenuItem closeWindowMI2;
    private javax.swing.JMenu generatorWindowMenu1;
    private javax.swing.JMenu grammarMenu1;
    private javax.swing.JMenuItem newMI;
    private javax.swing.JMenuItem openMI;
    private javax.swing.JMenuItem saveMI;
    private javax.swing.JPanel transformLearningPanel;
    private javax.swing.JMenuBar transformMenuBar;
    private javax.swing.JTabbedPane transformPane;
    private javax.swing.JPanel transformPanel;
    private javax.swing.JSeparator windowMenuSeparator2;
    // End of variables declaration//GEN-END:variables



    public void setTotalBeats(double beats) {
        totalBeats = beats;
        String b = Integer.toString((int) beats);

    }
    
  
public TransformPanel getTransformPanel()
{
    return transformTab;
}
}
