/**
 * This Java Class is part of the Impro-Visor Application
 * <p>
 * Copyright (C) 2005-2017 Robert Keller and Harvey Mudd College
 * <p>
 * Impro-Visor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * <p>
 * Impro-Visor is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * merchantability or fitness for a particular purpose.  See the
 * GNU General Public License for more details.
 * <p>
 * You should have received a copy of the GNU General Public License
 * along with Impro-Visor; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

package imp.gui;

import imp.com.PlayScoreCommand;
import imp.data.NoteSymbol;
import imp.data.PianoKey;
import imp.voicing.VoicingDebug;
import imp.voicing.VoicingDistanceCalculator;

import java.io.StringReader;
import javax.swing.Icon;
import javax.swing.JLabel;
import javax.swing.KeyStroke;
import java.awt.Color;

import polya.Polylist;
import polya.Tokenizer;

import java.util.Calendar;
import javax.swing.JPanel;
import javax.swing.JSeparator;
import java.util.*;

/**
 *
 * @author Emma Carlson (2009),
 * Mira Jambusaria and RObert Keller (2016) for labels and visichord integration
 * VisiChord uses some code from Erika Rice Sherpelz, Jeffrey Sherpelz, 
 * Adrian Mettler, and Gabriel Neer
 *
 */

public class VoicingKeyboard extends javax.swing.JDialog {

    boolean debug = false;

    Notate notate;
    boolean singleNoteMode = false;

    boolean turnOnOffLabels = true;
    //if true, labels on. else, labels off 

    int numberOfDisplayedPanes = 6;

    /** Creates new form VoicingKeyboard
     * @param notate
     * @param x
     * @param y */
    public VoicingKeyboard(Notate notate, int x, int y) {
        initComponents();
        initKeys();
        this.notate = notate;
        setDelegatedKeys();
        setSize(1045, 285);
        setLocation(x, y);
        WindowRegistry.registerWindow(this);
        setInvisible();

        setVisichordDialog();
    }

    @Override
    public void toFront() {
        super.toFront();
        if (visichordDialog != null) {
            visichordDialog.toFront();
        }
    }

    Notate getNotate() {
        return notate;
    }

    /**
     * Set additional keys that delegate to the Notate window
     */
    private void setDelegatedKeys() {
        // A huge chunk of code, just to have a key stroke do something.
        // In this case, the something is to have control-I open the voicing editor.
        // I tried to accomplish this by adding an accelerator, but everytime
        // I did that in netbeans, it broke the piano key display.

        KeyStroke stroke = KeyStroke.getKeyStroke('I', java.awt.event.InputEvent.CTRL_DOWN_MASK);
        jPanel1.getInputMap().put(stroke, "doSomething");
        jPanel1.getActionMap().put("doSomething",
                new javax.swing.Action() {
                    public void actionPerformed(java.awt.event.ActionEvent e) {
                        /*getNotate().openVoicingEditor();*/
                    }

                    public void addPropertyChangeListener(java.beans.PropertyChangeListener x) {
                    }

                    public void removePropertyChangeListener(java.beans.PropertyChangeListener x) {
                    }

                    public boolean isEnabled() {
                        return true;
                    }

                    public void setEnabled(boolean x) {
                    }

                    public void putValue(String y, Object x) {
                    }

                    public Object getValue(String y) {
                        return null;
                    }
                }
        );
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        visichordDialog = new javax.swing.JDialog();
        voicingStaffPanel = new javax.swing.JPanel();
        clefLabel = new javax.swing.JLabel();
        playStopButtonGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        keyboardLP = new javax.swing.JLayeredPane();
        keyA0 = new javax.swing.JLabel();
        keyB0 = new javax.swing.JLabel();
        keyC1 = new javax.swing.JLabel();
        keyD1 = new javax.swing.JLabel();
        keyE1 = new javax.swing.JLabel();
        keyF1 = new javax.swing.JLabel();
        keyG1 = new javax.swing.JLabel();
        keyA1 = new javax.swing.JLabel();
        keyB1 = new javax.swing.JLabel();
        keyC2 = new javax.swing.JLabel();
        keyD2 = new javax.swing.JLabel();
        keyE2 = new javax.swing.JLabel();
        keyF2 = new javax.swing.JLabel();
        keyG2 = new javax.swing.JLabel();
        keyA2 = new javax.swing.JLabel();
        keyB2 = new javax.swing.JLabel();
        keyC3 = new javax.swing.JLabel();
        keyD3 = new javax.swing.JLabel();
        keyE3 = new javax.swing.JLabel();
        keyF3 = new javax.swing.JLabel();
        keyG3 = new javax.swing.JLabel();
        keyA3 = new javax.swing.JLabel();
        keyB3 = new javax.swing.JLabel();
        keyC4 = new javax.swing.JLabel();
        keyD4 = new javax.swing.JLabel();
        keyE4 = new javax.swing.JLabel();
        keyF4 = new javax.swing.JLabel();
        keyG4 = new javax.swing.JLabel();
        keyA4 = new javax.swing.JLabel();
        keyB4 = new javax.swing.JLabel();
        keyC5 = new javax.swing.JLabel();
        keyD5 = new javax.swing.JLabel();
        keyE5 = new javax.swing.JLabel();
        keyF5 = new javax.swing.JLabel();
        keyG5 = new javax.swing.JLabel();
        keyA5 = new javax.swing.JLabel();
        keyB5 = new javax.swing.JLabel();
        keyC6 = new javax.swing.JLabel();
        keyD6 = new javax.swing.JLabel();
        keyE6 = new javax.swing.JLabel();
        keyF6 = new javax.swing.JLabel();
        keyG6 = new javax.swing.JLabel();
        keyA6 = new javax.swing.JLabel();
        keyB6 = new javax.swing.JLabel();
        keyC7 = new javax.swing.JLabel();
        keyD7 = new javax.swing.JLabel();
        keyE7 = new javax.swing.JLabel();
        keyF7 = new javax.swing.JLabel();
        keyG7 = new javax.swing.JLabel();
        keyA7 = new javax.swing.JLabel();
        keyB7 = new javax.swing.JLabel();
        keyC8 = new javax.swing.JLabel();
        keyBb0 = new javax.swing.JLabel();
        keyCsharp1 = new javax.swing.JLabel();
        keyEb1 = new javax.swing.JLabel();
        keyFsharp1 = new javax.swing.JLabel();
        keyGsharp1 = new javax.swing.JLabel();
        keyBb1 = new javax.swing.JLabel();
        keyCsharp2 = new javax.swing.JLabel();
        keyEb2 = new javax.swing.JLabel();
        keyFsharp2 = new javax.swing.JLabel();
        keyGsharp2 = new javax.swing.JLabel();
        keyBb2 = new javax.swing.JLabel();
        keyCsharp3 = new javax.swing.JLabel();
        keyEb3 = new javax.swing.JLabel();
        keyFsharp3 = new javax.swing.JLabel();
        keyGsharp3 = new javax.swing.JLabel();
        keyBb3 = new javax.swing.JLabel();
        keyCsharp4 = new javax.swing.JLabel();
        keyEb4 = new javax.swing.JLabel();
        keyFsharp4 = new javax.swing.JLabel();
        keyGsharp4 = new javax.swing.JLabel();
        keyBb4 = new javax.swing.JLabel();
        keyCsharp5 = new javax.swing.JLabel();
        keyEb5 = new javax.swing.JLabel();
        keyFsharp5 = new javax.swing.JLabel();
        keyGsharp5 = new javax.swing.JLabel();
        keyBb5 = new javax.swing.JLabel();
        keyCsharp6 = new javax.swing.JLabel();
        keyEb6 = new javax.swing.JLabel();
        keyFsharp6 = new javax.swing.JLabel();
        keyGsharp6 = new javax.swing.JLabel();
        keyBb6 = new javax.swing.JLabel();
        keyCsharp7 = new javax.swing.JLabel();
        keyEb7 = new javax.swing.JLabel();
        keyFsharp7 = new javax.swing.JLabel();
        keyGsharp7 = new javax.swing.JLabel();
        keyBb7 = new javax.swing.JLabel();
        pointerC4 = new javax.swing.JLabel();
        chordRootNoteLabel = new javax.swing.JLabel();
        ctrlClicktoChangeRootLabel = new javax.swing.JLabel();
        ctrlShiftClickExtLabel = new javax.swing.JLabel();
        playChordButton = new javax.swing.JButton();
        jToolBar1 = new javax.swing.JToolBar();
        chordStepBackButton = new javax.swing.JButton();
        chordReplayButton = new javax.swing.JButton();
        chordStepForwardButton = new javax.swing.JButton();
        pauseBtn = new javax.swing.JToggleButton();
        playBtn = new javax.swing.JButton();
        stopBtn = new javax.swing.JButton();
        saveVoicingBtn = new javax.swing.JButton();
        keyNamesPanel = new javax.swing.JPanel();
        whiteKeyLabels = new javax.swing.JPanel();
        A0 = new javax.swing.JLabel();
        B0 = new javax.swing.JLabel();
        C1 = new javax.swing.JLabel();
        D1 = new javax.swing.JLabel();
        E1 = new javax.swing.JLabel();
        F1 = new javax.swing.JLabel();
        G1 = new javax.swing.JLabel();
        A1 = new javax.swing.JLabel();
        B1 = new javax.swing.JLabel();
        C2 = new javax.swing.JLabel();
        D2 = new javax.swing.JLabel();
        E2 = new javax.swing.JLabel();
        F2 = new javax.swing.JLabel();
        G2 = new javax.swing.JLabel();
        A2 = new javax.swing.JLabel();
        B2 = new javax.swing.JLabel();
        C3 = new javax.swing.JLabel();
        D3 = new javax.swing.JLabel();
        E3 = new javax.swing.JLabel();
        F3 = new javax.swing.JLabel();
        G3 = new javax.swing.JLabel();
        A3 = new javax.swing.JLabel();
        B3 = new javax.swing.JLabel();
        C4 = new javax.swing.JLabel();
        D4 = new javax.swing.JLabel();
        E4 = new javax.swing.JLabel();
        F4 = new javax.swing.JLabel();
        G4 = new javax.swing.JLabel();
        A4 = new javax.swing.JLabel();
        B4 = new javax.swing.JLabel();
        C5 = new javax.swing.JLabel();
        D5 = new javax.swing.JLabel();
        E5 = new javax.swing.JLabel();
        F5 = new javax.swing.JLabel();
        G5 = new javax.swing.JLabel();
        A5 = new javax.swing.JLabel();
        B5 = new javax.swing.JLabel();
        C6 = new javax.swing.JLabel();
        D6 = new javax.swing.JLabel();
        E6 = new javax.swing.JLabel();
        F6 = new javax.swing.JLabel();
        G6 = new javax.swing.JLabel();
        A6 = new javax.swing.JLabel();
        B6 = new javax.swing.JLabel();
        C7 = new javax.swing.JLabel();
        D7 = new javax.swing.JLabel();
        E7 = new javax.swing.JLabel();
        F7 = new javax.swing.JLabel();
        G7 = new javax.swing.JLabel();
        A7 = new javax.swing.JLabel();
        B7 = new javax.swing.JLabel();
        C8 = new javax.swing.JLabel();
        blackKeyLabels = new javax.swing.JPanel();
        Bb0 = new javax.swing.JLabel();
        Csharp1 = new javax.swing.JLabel();
        Eb1 = new javax.swing.JLabel();
        Fsharp1 = new javax.swing.JLabel();
        Gsharp1 = new javax.swing.JLabel();
        Bb1 = new javax.swing.JLabel();
        Csharp2 = new javax.swing.JLabel();
        Eb2 = new javax.swing.JLabel();
        Fsharp2 = new javax.swing.JLabel();
        Gsharp2 = new javax.swing.JLabel();
        Bb2 = new javax.swing.JLabel();
        Csharp3 = new javax.swing.JLabel();
        Eb3 = new javax.swing.JLabel();
        Fsharp3 = new javax.swing.JLabel();
        Gsharp3 = new javax.swing.JLabel();
        Bb3 = new javax.swing.JLabel();
        Csharp4 = new javax.swing.JLabel();
        Eb4 = new javax.swing.JLabel();
        Fsharp4 = new javax.swing.JLabel();
        Gsharp4 = new javax.swing.JLabel();
        Bb4 = new javax.swing.JLabel();
        Csharp5 = new javax.swing.JLabel();
        Eb5 = new javax.swing.JLabel();
        Fsharp5 = new javax.swing.JLabel();
        Gsharp5 = new javax.swing.JLabel();
        Bb5 = new javax.swing.JLabel();
        Csharp6 = new javax.swing.JLabel();
        Eb6 = new javax.swing.JLabel();
        Fsharp6 = new javax.swing.JLabel();
        Gsharp6 = new javax.swing.JLabel();
        Bb6 = new javax.swing.JLabel();
        Csharp7 = new javax.swing.JLabel();
        Eb7 = new javax.swing.JLabel();
        Fsharp7 = new javax.swing.JLabel();
        Gsharp7 = new javax.swing.JLabel();
        Bb7 = new javax.swing.JLabel();
        presentChordDisplay = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        optionsMenu = new javax.swing.JMenu();
        clearKeyboardMI = new javax.swing.JMenuItem();
        resetChordDisplayMI = new javax.swing.JMenuItem();
        playChordMI = new javax.swing.JMenuItem();
        addToSequenceMI = new javax.swing.JMenuItem();
        turnOnOffKeyLabelsMI = new javax.swing.JCheckBoxMenuItem();
        voicingModeMenu = new javax.swing.JMenu();
        singleNoteModeMI = new javax.swing.JMenuItem();
        chordModeMI = new javax.swing.JMenuItem();
        voicingTransposeMenu = new javax.swing.JMenu();
        upHalfStepMI = new javax.swing.JMenuItem();
        downHalfStepMI = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        upOctaveMI = new javax.swing.JMenuItem();
        downOctaveMI = new javax.swing.JMenuItem();
        playbackMenu = new javax.swing.JMenu();
        startPlayMI = new javax.swing.JMenuItem();
        pausePlayMI = new javax.swing.JMenuItem();
        stopPlayMI = new javax.swing.JMenuItem();
        startSelPlayMI = new javax.swing.JMenuItem();
        stopSelPlayMI = new javax.swing.JMenuItem();
        windowMenu = new javax.swing.JMenu();
        closeWindowMI = new javax.swing.JMenuItem();
        cascadeMI = new javax.swing.JMenuItem();
        windowMenuSeparator = new javax.swing.JSeparator();

        visichordDialog.setTitle("Visichord Display");
        visichordDialog.setBackground(new java.awt.Color(255, 255, 255));
        visichordDialog.setBounds(new java.awt.Rectangle(0, 23, 100, 450));
        visichordDialog.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        visichordDialog.setMinimumSize(new java.awt.Dimension(1100, 450));
        visichordDialog.setSize(new java.awt.Dimension(1100, 450));
        visichordDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        voicingStaffPanel.setBackground(new java.awt.Color(255, 255, 255));
        voicingStaffPanel.setBounds(new java.awt.Rectangle(0, 0, 1100, 420));
        voicingStaffPanel.setMaximumSize(new java.awt.Dimension(1100, 420));
        voicingStaffPanel.setMinimumSize(new java.awt.Dimension(1100, 420));
        voicingStaffPanel.setName(""); // NOI18N
        voicingStaffPanel.setOpaque(false);
        voicingStaffPanel.setPreferredSize(new java.awt.Dimension(1100, 420));
        voicingStaffPanel.setLayout(null);

        clefLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/clefs.gif"))); // NOI18N
        voicingStaffPanel.add(clefLabel);
        clefLabel.setBounds(30, 80, 77, 260);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        visichordDialog.getContentPane().add(voicingStaffPanel, gridBagConstraints);

        setTitle("Keyboard");
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(255, 51, 51));
        setMinimumSize(new java.awt.Dimension(1100, 370));
        setPreferredSize(new java.awt.Dimension(1100, 370));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setMaximumSize(new java.awt.Dimension(1045, 150));
        jPanel1.setMinimumSize(new java.awt.Dimension(1045, 150));
        jPanel1.setPreferredSize(new java.awt.Dimension(1045, 150));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        keyboardLP.setDoubleBuffered(true);
        keyboardLP.setMinimumSize(new java.awt.Dimension(1045, 150));
        keyboardLP.setRequestFocusEnabled(false);
        keyboardLP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                keyboardLPMouseClicked(evt);
            }
        });

        keyA0.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyA0);
        keyA0.setBounds(0, 0, 20, 120);

        keyB0.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyB0);
        keyB0.setBounds(20, 0, 20, 120);

        keyC1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyC1);
        keyC1.setBounds(40, 0, 20, 120);

        keyD1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyD1);
        keyD1.setBounds(60, 0, 20, 120);

        keyE1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyE1);
        keyE1.setBounds(80, 0, 20, 120);

        keyF1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyF1);
        keyF1.setBounds(100, 0, 20, 120);

        keyG1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyG1);
        keyG1.setBounds(120, 0, 20, 120);

        keyA1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyA1);
        keyA1.setBounds(140, 0, 20, 120);

        keyB1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyB1);
        keyB1.setBounds(160, 0, 20, 120);

        keyC2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyC2);
        keyC2.setBounds(180, 0, 20, 120);

        keyD2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyD2);
        keyD2.setBounds(200, 0, 20, 120);

        keyE2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyE2);
        keyE2.setBounds(220, 0, 20, 120);

        keyF2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyF2);
        keyF2.setBounds(240, 0, 20, 120);

        keyG2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyG2);
        keyG2.setBounds(260, 0, 20, 120);

        keyA2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyA2);
        keyA2.setBounds(280, 0, 20, 120);

        keyB2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyB2);
        keyB2.setBounds(300, 0, 20, 120);

        keyC3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyC3);
        keyC3.setBounds(320, 0, 20, 120);

        keyD3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyD3);
        keyD3.setBounds(340, 0, 20, 120);

        keyE3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyE3);
        keyE3.setBounds(360, 0, 20, 120);

        keyF3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyF3);
        keyF3.setBounds(380, 0, 20, 120);

        keyG3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyG3);
        keyG3.setBounds(400, 0, 20, 120);

        keyA3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyA3);
        keyA3.setBounds(420, 0, 20, 120);

        keyB3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyB3);
        keyB3.setBounds(440, 0, 20, 120);

        keyC4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyC4);
        keyC4.setBounds(460, 0, 20, 120);

        keyD4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyD4);
        keyD4.setBounds(480, 0, 20, 120);

        keyE4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyE4);
        keyE4.setBounds(500, 0, 20, 120);

        keyF4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyF4);
        keyF4.setBounds(520, 0, 20, 120);

        keyG4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyG4);
        keyG4.setBounds(540, 0, 20, 120);

        keyA4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyA4);
        keyA4.setBounds(560, 0, 20, 120);

        keyB4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyB4);
        keyB4.setBounds(580, 0, 20, 120);

        keyC5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyC5);
        keyC5.setBounds(600, 0, 20, 120);

        keyD5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyD5);
        keyD5.setBounds(620, 0, 20, 120);

        keyE5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyE5);
        keyE5.setBounds(640, 0, 20, 120);

        keyF5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyF5);
        keyF5.setBounds(660, 0, 20, 120);

        keyG5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyG5);
        keyG5.setBounds(680, 0, 20, 120);

        keyA5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyA5);
        keyA5.setBounds(700, 0, 20, 120);

        keyB5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyB5);
        keyB5.setBounds(720, 0, 20, 120);

        keyC6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyC6);
        keyC6.setBounds(740, 0, 20, 120);

        keyD6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyD6);
        keyD6.setBounds(760, 0, 20, 120);

        keyE6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyE6);
        keyE6.setBounds(780, 0, 20, 120);

        keyF6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyF6);
        keyF6.setBounds(800, 0, 20, 120);

        keyG6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyG6);
        keyG6.setBounds(820, 0, 20, 120);

        keyA6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyA6);
        keyA6.setBounds(840, 0, 20, 120);

        keyB6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyB6);
        keyB6.setBounds(860, 0, 20, 120);

        keyC7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyC7);
        keyC7.setBounds(880, 0, 20, 120);

        keyD7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyD7);
        keyD7.setBounds(900, 0, 20, 120);

        keyE7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyE7);
        keyE7.setBounds(920, 0, 20, 120);

        keyF7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyF7);
        keyF7.setBounds(940, 0, 20, 120);

        keyG7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyG7);
        keyG7.setBounds(960, 0, 20, 120);

        keyA7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyA7);
        keyA7.setBounds(980, 0, 20, 120);

        keyB7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyB7);
        keyB7.setBounds(1000, 0, 20, 120);

        keyC8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/whitekey.jpg"))); // NOI18N
        keyboardLP.add(keyC8);
        keyC8.setBounds(1020, 0, 20, 120);

        keyBb0.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/blackkey.jpg"))); // NOI18N
        keyboardLP.setLayer(keyBb0, javax.swing.JLayeredPane.PALETTE_LAYER);
        keyboardLP.add(keyBb0);
        keyBb0.setBounds(13, 0, 14, 80);

        keyCsharp1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/blackkey.jpg"))); // NOI18N
        keyboardLP.setLayer(keyCsharp1, javax.swing.JLayeredPane.PALETTE_LAYER);
        keyboardLP.add(keyCsharp1);
        keyCsharp1.setBounds(53, 0, 14, 80);

        keyEb1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/blackkey.jpg"))); // NOI18N
        keyboardLP.setLayer(keyEb1, javax.swing.JLayeredPane.PALETTE_LAYER);
        keyboardLP.add(keyEb1);
        keyEb1.setBounds(73, 0, 14, 80);

        keyFsharp1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/blackkey.jpg"))); // NOI18N
        keyboardLP.setLayer(keyFsharp1, javax.swing.JLayeredPane.PALETTE_LAYER);
        keyboardLP.add(keyFsharp1);
        keyFsharp1.setBounds(113, 0, 14, 80);

        keyGsharp1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/blackkey.jpg"))); // NOI18N
        keyboardLP.setLayer(keyGsharp1, javax.swing.JLayeredPane.PALETTE_LAYER);
        keyboardLP.add(keyGsharp1);
        keyGsharp1.setBounds(133, 0, 14, 80);

        keyBb1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/blackkey.jpg"))); // NOI18N
        keyboardLP.setLayer(keyBb1, javax.swing.JLayeredPane.PALETTE_LAYER);
        keyboardLP.add(keyBb1);
        keyBb1.setBounds(153, 0, 14, 80);

        keyCsharp2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/blackkey.jpg"))); // NOI18N
        keyboardLP.setLayer(keyCsharp2, javax.swing.JLayeredPane.PALETTE_LAYER);
        keyboardLP.add(keyCsharp2);
        keyCsharp2.setBounds(193, 0, 14, 80);

        keyEb2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/blackkey.jpg"))); // NOI18N
        keyboardLP.setLayer(keyEb2, javax.swing.JLayeredPane.PALETTE_LAYER);
        keyboardLP.add(keyEb2);
        keyEb2.setBounds(213, 0, 14, 80);

        keyFsharp2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/blackkey.jpg"))); // NOI18N
        keyboardLP.setLayer(keyFsharp2, javax.swing.JLayeredPane.PALETTE_LAYER);
        keyboardLP.add(keyFsharp2);
        keyFsharp2.setBounds(253, 0, 14, 80);

        keyGsharp2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/blackkey.jpg"))); // NOI18N
        keyboardLP.setLayer(keyGsharp2, javax.swing.JLayeredPane.PALETTE_LAYER);
        keyboardLP.add(keyGsharp2);
        keyGsharp2.setBounds(273, 0, 14, 80);

        keyBb2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/blackkey.jpg"))); // NOI18N
        keyboardLP.setLayer(keyBb2, javax.swing.JLayeredPane.PALETTE_LAYER);
        keyboardLP.add(keyBb2);
        keyBb2.setBounds(293, 0, 14, 80);

        keyCsharp3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/blackkey.jpg"))); // NOI18N
        keyboardLP.setLayer(keyCsharp3, javax.swing.JLayeredPane.PALETTE_LAYER);
        keyboardLP.add(keyCsharp3);
        keyCsharp3.setBounds(333, 0, 14, 80);

        keyEb3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/blackkey.jpg"))); // NOI18N
        keyboardLP.setLayer(keyEb3, javax.swing.JLayeredPane.PALETTE_LAYER);
        keyboardLP.add(keyEb3);
        keyEb3.setBounds(353, 0, 14, 80);

        keyFsharp3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/blackkey.jpg"))); // NOI18N
        keyboardLP.setLayer(keyFsharp3, javax.swing.JLayeredPane.PALETTE_LAYER);
        keyboardLP.add(keyFsharp3);
        keyFsharp3.setBounds(393, 0, 14, 80);

        keyGsharp3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/blackkey.jpg"))); // NOI18N
        keyboardLP.setLayer(keyGsharp3, javax.swing.JLayeredPane.PALETTE_LAYER);
        keyboardLP.add(keyGsharp3);
        keyGsharp3.setBounds(413, 0, 14, 80);

        keyBb3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/blackkey.jpg"))); // NOI18N
        keyboardLP.setLayer(keyBb3, javax.swing.JLayeredPane.PALETTE_LAYER);
        keyboardLP.add(keyBb3);
        keyBb3.setBounds(433, 0, 14, 80);

        keyCsharp4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/blackkey.jpg"))); // NOI18N
        keyboardLP.setLayer(keyCsharp4, javax.swing.JLayeredPane.PALETTE_LAYER);
        keyboardLP.add(keyCsharp4);
        keyCsharp4.setBounds(473, 0, 14, 80);

        keyEb4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/blackkey.jpg"))); // NOI18N
        keyboardLP.setLayer(keyEb4, javax.swing.JLayeredPane.PALETTE_LAYER);
        keyboardLP.add(keyEb4);
        keyEb4.setBounds(493, 0, 14, 80);

        keyFsharp4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/blackkey.jpg"))); // NOI18N
        keyboardLP.setLayer(keyFsharp4, javax.swing.JLayeredPane.PALETTE_LAYER);
        keyboardLP.add(keyFsharp4);
        keyFsharp4.setBounds(533, 0, 14, 80);

        keyGsharp4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/blackkey.jpg"))); // NOI18N
        keyboardLP.setLayer(keyGsharp4, javax.swing.JLayeredPane.PALETTE_LAYER);
        keyboardLP.add(keyGsharp4);
        keyGsharp4.setBounds(553, 0, 14, 80);

        keyBb4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/blackkey.jpg"))); // NOI18N
        keyboardLP.setLayer(keyBb4, javax.swing.JLayeredPane.PALETTE_LAYER);
        keyboardLP.add(keyBb4);
        keyBb4.setBounds(573, 0, 14, 80);

        keyCsharp5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/blackkey.jpg"))); // NOI18N
        keyboardLP.setLayer(keyCsharp5, javax.swing.JLayeredPane.PALETTE_LAYER);
        keyboardLP.add(keyCsharp5);
        keyCsharp5.setBounds(613, 0, 14, 80);

        keyEb5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/blackkey.jpg"))); // NOI18N
        keyboardLP.setLayer(keyEb5, javax.swing.JLayeredPane.PALETTE_LAYER);
        keyboardLP.add(keyEb5);
        keyEb5.setBounds(633, 0, 14, 80);

        keyFsharp5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/blackkey.jpg"))); // NOI18N
        keyboardLP.setLayer(keyFsharp5, javax.swing.JLayeredPane.PALETTE_LAYER);
        keyboardLP.add(keyFsharp5);
        keyFsharp5.setBounds(673, 0, 14, 80);

        keyGsharp5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/blackkey.jpg"))); // NOI18N
        keyboardLP.setLayer(keyGsharp5, javax.swing.JLayeredPane.PALETTE_LAYER);
        keyboardLP.add(keyGsharp5);
        keyGsharp5.setBounds(693, 0, 14, 80);

        keyBb5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/blackkey.jpg"))); // NOI18N
        keyboardLP.setLayer(keyBb5, javax.swing.JLayeredPane.PALETTE_LAYER);
        keyboardLP.add(keyBb5);
        keyBb5.setBounds(713, 0, 14, 80);

        keyCsharp6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/blackkey.jpg"))); // NOI18N
        keyboardLP.setLayer(keyCsharp6, javax.swing.JLayeredPane.PALETTE_LAYER);
        keyboardLP.add(keyCsharp6);
        keyCsharp6.setBounds(753, 0, 14, 80);

        keyEb6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/blackkey.jpg"))); // NOI18N
        keyboardLP.setLayer(keyEb6, javax.swing.JLayeredPane.PALETTE_LAYER);
        keyboardLP.add(keyEb6);
        keyEb6.setBounds(773, 0, 14, 80);

        keyFsharp6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/blackkey.jpg"))); // NOI18N
        keyboardLP.setLayer(keyFsharp6, javax.swing.JLayeredPane.PALETTE_LAYER);
        keyboardLP.add(keyFsharp6);
        keyFsharp6.setBounds(813, 0, 14, 80);

        keyGsharp6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/blackkey.jpg"))); // NOI18N
        keyboardLP.setLayer(keyGsharp6, javax.swing.JLayeredPane.PALETTE_LAYER);
        keyboardLP.add(keyGsharp6);
        keyGsharp6.setBounds(833, 0, 14, 80);

        keyBb6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/blackkey.jpg"))); // NOI18N
        keyboardLP.setLayer(keyBb6, javax.swing.JLayeredPane.PALETTE_LAYER);
        keyboardLP.add(keyBb6);
        keyBb6.setBounds(853, 0, 14, 80);

        keyCsharp7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/blackkey.jpg"))); // NOI18N
        keyboardLP.setLayer(keyCsharp7, javax.swing.JLayeredPane.PALETTE_LAYER);
        keyboardLP.add(keyCsharp7);
        keyCsharp7.setBounds(893, 0, 14, 80);

        keyEb7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/blackkey.jpg"))); // NOI18N
        keyboardLP.setLayer(keyEb7, javax.swing.JLayeredPane.PALETTE_LAYER);
        keyboardLP.add(keyEb7);
        keyEb7.setBounds(913, 0, 14, 80);

        keyFsharp7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/blackkey.jpg"))); // NOI18N
        keyboardLP.setLayer(keyFsharp7, javax.swing.JLayeredPane.PALETTE_LAYER);
        keyboardLP.add(keyFsharp7);
        keyFsharp7.setBounds(953, 0, 14, 80);

        keyGsharp7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/blackkey.jpg"))); // NOI18N
        keyboardLP.setLayer(keyGsharp7, javax.swing.JLayeredPane.PALETTE_LAYER);
        keyboardLP.add(keyGsharp7);
        keyGsharp7.setBounds(973, 0, 14, 80);

        keyBb7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/blackkey.jpg"))); // NOI18N
        keyboardLP.setLayer(keyBb7, javax.swing.JLayeredPane.PALETTE_LAYER);
        keyboardLP.add(keyBb7);
        keyBb7.setBounds(993, 0, 14, 80);

        pointerC4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/pointer.png"))); // NOI18N
        keyboardLP.add(pointerC4);
        pointerC4.setBounds(460, 120, 20, 30);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 1045;
        gridBagConstraints.ipady = 150;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(keyboardLP, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        getContentPane().add(jPanel1, gridBagConstraints);

        chordRootNoteLabel.setText("Bass note indicated in blue.");
        chordRootNoteLabel.setMaximumSize(new java.awt.Dimension(400, 14));
        chordRootNoteLabel.setMinimumSize(new java.awt.Dimension(400, 14));
        chordRootNoteLabel.setPreferredSize(new java.awt.Dimension(400, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(chordRootNoteLabel, gridBagConstraints);

        ctrlClicktoChangeRootLabel.setText("Ctrl-click to change bass note, Shift-click to change bass range.");
        ctrlClicktoChangeRootLabel.setMaximumSize(new java.awt.Dimension(450, 14));
        ctrlClicktoChangeRootLabel.setMinimumSize(new java.awt.Dimension(450, 14));
        ctrlClicktoChangeRootLabel.setPreferredSize(new java.awt.Dimension(450, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(ctrlClicktoChangeRootLabel, gridBagConstraints);

        ctrlShiftClickExtLabel.setText("Ctrl-shift-click to add an extension.");
        ctrlShiftClickExtLabel.setMaximumSize(new java.awt.Dimension(400, 14));
        ctrlShiftClickExtLabel.setMinimumSize(new java.awt.Dimension(400, 14));
        ctrlShiftClickExtLabel.setPreferredSize(new java.awt.Dimension(400, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(ctrlShiftClickExtLabel, gridBagConstraints);

        playChordButton.setText("Play Chord");
        playChordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playChordButtonActionPerformed(evt);
            }
        });
        playChordButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                playChordButtonKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 50);
        getContentPane().add(playChordButton, gridBagConstraints);

        jToolBar1.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1), javax.swing.BorderFactory.createEmptyBorder(3, 3, 1, 1)));
        jToolBar1.setFloatable(false);

        chordStepBackButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/icons/playReversedGreen.gif"))); // NOI18N
        chordStepBackButton.setToolTipText("Move back to the previous chord (without playing).\n");
        chordStepBackButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        chordStepBackButton.setFocusable(false);
        chordStepBackButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        chordStepBackButton.setMaximumSize(new java.awt.Dimension(30, 30));
        chordStepBackButton.setMinimumSize(new java.awt.Dimension(30, 30));
        chordStepBackButton.setPreferredSize(new java.awt.Dimension(30, 30));
        chordStepBackButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        chordStepBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chordStepBackButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(chordStepBackButton);

        chordReplayButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/icons/replayGreen.gif"))); // NOI18N
        chordReplayButton.setToolTipText("Replays chord.");
        chordReplayButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        chordReplayButton.setFocusable(false);
        chordReplayButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        chordReplayButton.setMaximumSize(new java.awt.Dimension(30, 30));
        chordReplayButton.setMinimumSize(new java.awt.Dimension(30, 30));
        chordReplayButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        chordReplayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chordReplayButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(chordReplayButton);

        chordStepForwardButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/icons/playGreen.gif"))); // NOI18N
        chordStepForwardButton.setToolTipText("Move to, and play, the next chord.");
        chordStepForwardButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        chordStepForwardButton.setFocusable(false);
        chordStepForwardButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        chordStepForwardButton.setMaximumSize(new java.awt.Dimension(30, 30));
        chordStepForwardButton.setMinimumSize(new java.awt.Dimension(30, 30));
        chordStepForwardButton.setPreferredSize(new java.awt.Dimension(30, 30));
        chordStepForwardButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        chordStepForwardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chordStepForwardButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(chordStepForwardButton);

        playStopButtonGroup.add(pauseBtn);
        pauseBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/toolbar/pause.gif"))); // NOI18N
        pauseBtn.setToolTipText("Pause or resume playback.");
        pauseBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        pauseBtn.setFocusable(false);
        pauseBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pauseBtn.setMaximumSize(new java.awt.Dimension(30, 30));
        pauseBtn.setMinimumSize(new java.awt.Dimension(30, 30));
        pauseBtn.setPreferredSize(new java.awt.Dimension(30, 30));
        pauseBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        pauseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseBtnActionPerformed(evt);
            }
        });
        jToolBar1.add(pauseBtn);

        playBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/toolbar/play.gif"))); // NOI18N
        playBtn.setToolTipText("Play the entire leadsheet, starting with the first chorus.\nTo play just the current chorus, select the first beat of that chorus and press Shift-Enter.");
        playBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        playStopButtonGroup.add(playBtn);
        playBtn.setFocusable(false);
        playBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        playBtn.setMaximumSize(new java.awt.Dimension(30, 30));
        playBtn.setMinimumSize(new java.awt.Dimension(30, 30));
        playBtn.setPreferredSize(new java.awt.Dimension(30, 30));
        playBtn.setSelected(true);
        playBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        playBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playBtnActionPerformed(evt);
            }
        });
        jToolBar1.add(playBtn);

        stopBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/graphics/toolbar/stop.gif"))); // NOI18N
        stopBtn.setToolTipText("Stop playback.");
        stopBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        playStopButtonGroup.add(stopBtn);
        stopBtn.setFocusable(false);
        stopBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        stopBtn.setMaximumSize(new java.awt.Dimension(30, 30));
        stopBtn.setMinimumSize(new java.awt.Dimension(30, 30));
        stopBtn.setPreferredSize(new java.awt.Dimension(30, 30));
        stopBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        stopBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopBtnActionPerformed(evt);
            }
        });
        jToolBar1.add(stopBtn);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(jToolBar1, gridBagConstraints);

        saveVoicingBtn.setText("Save Voicing");
        saveVoicingBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveVoicingBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        getContentPane().add(saveVoicingBtn, gridBagConstraints);
        saveVoicingBtn.getAccessibleContext().setAccessibleName("VoicingChord");

        keyNamesPanel.setAlignmentX(0.0F);
        keyNamesPanel.setAlignmentY(0.0F);
        keyNamesPanel.setMinimumSize(new java.awt.Dimension(1040, 60));
        keyNamesPanel.setPreferredSize(new java.awt.Dimension(1040, 154));
        keyNamesPanel.setLayout(new java.awt.GridBagLayout());

        whiteKeyLabels.setAlignmentX(0.0F);
        whiteKeyLabels.setMinimumSize(new java.awt.Dimension(1045, 12));
        whiteKeyLabels.setOpaque(false);
        whiteKeyLabels.setLayout(new java.awt.GridBagLayout());

        A0.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        A0.setText("A");
        A0.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        A0.setMaximumSize(new java.awt.Dimension(20, 14));
        A0.setMinimumSize(new java.awt.Dimension(20, 14));
        A0.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        whiteKeyLabels.add(A0, gridBagConstraints);

        B0.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        B0.setText("B");
        B0.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        B0.setMaximumSize(new java.awt.Dimension(20, 14));
        B0.setMinimumSize(new java.awt.Dimension(20, 14));
        B0.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        whiteKeyLabels.add(B0, gridBagConstraints);

        C1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        C1.setText("C");
        C1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        C1.setMaximumSize(new java.awt.Dimension(20, 14));
        C1.setMinimumSize(new java.awt.Dimension(20, 14));
        C1.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        whiteKeyLabels.add(C1, gridBagConstraints);

        D1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        D1.setText("D");
        D1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        D1.setMaximumSize(new java.awt.Dimension(20, 14));
        D1.setMinimumSize(new java.awt.Dimension(20, 14));
        D1.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        whiteKeyLabels.add(D1, gridBagConstraints);

        E1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        E1.setText("E");
        E1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        E1.setMaximumSize(new java.awt.Dimension(20, 14));
        E1.setMinimumSize(new java.awt.Dimension(20, 14));
        E1.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        whiteKeyLabels.add(E1, gridBagConstraints);

        F1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        F1.setText("F");
        F1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        F1.setMaximumSize(new java.awt.Dimension(20, 14));
        F1.setMinimumSize(new java.awt.Dimension(20, 14));
        F1.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        whiteKeyLabels.add(F1, gridBagConstraints);

        G1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        G1.setText("G");
        G1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        G1.setMaximumSize(new java.awt.Dimension(20, 14));
        G1.setMinimumSize(new java.awt.Dimension(20, 14));
        G1.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        whiteKeyLabels.add(G1, gridBagConstraints);

        A1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        A1.setText("A");
        A1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        A1.setMaximumSize(new java.awt.Dimension(20, 14));
        A1.setMinimumSize(new java.awt.Dimension(20, 14));
        A1.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        whiteKeyLabels.add(A1, gridBagConstraints);

        B1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        B1.setText("B");
        B1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        B1.setMaximumSize(new java.awt.Dimension(20, 14));
        B1.setMinimumSize(new java.awt.Dimension(20, 14));
        B1.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        whiteKeyLabels.add(B1, gridBagConstraints);

        C2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        C2.setText("C");
        C2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        C2.setMaximumSize(new java.awt.Dimension(20, 14));
        C2.setMinimumSize(new java.awt.Dimension(20, 14));
        C2.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        whiteKeyLabels.add(C2, gridBagConstraints);

        D2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        D2.setLabelFor(keyD4);
        D2.setText("D");
        D2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        D2.setMaximumSize(new java.awt.Dimension(20, 14));
        D2.setMinimumSize(new java.awt.Dimension(20, 14));
        D2.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        whiteKeyLabels.add(D2, gridBagConstraints);

        E2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        E2.setText("E");
        E2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        E2.setMaximumSize(new java.awt.Dimension(20, 14));
        E2.setMinimumSize(new java.awt.Dimension(20, 14));
        E2.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 11;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        whiteKeyLabels.add(E2, gridBagConstraints);

        F2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        F2.setText("F");
        F2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        F2.setMaximumSize(new java.awt.Dimension(20, 14));
        F2.setMinimumSize(new java.awt.Dimension(20, 14));
        F2.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 12;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        whiteKeyLabels.add(F2, gridBagConstraints);

        G2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        G2.setText("G");
        G2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        G2.setMaximumSize(new java.awt.Dimension(20, 14));
        G2.setMinimumSize(new java.awt.Dimension(20, 14));
        G2.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 13;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        whiteKeyLabels.add(G2, gridBagConstraints);

        A2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        A2.setText("A");
        A2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        A2.setMaximumSize(new java.awt.Dimension(20, 14));
        A2.setMinimumSize(new java.awt.Dimension(20, 14));
        A2.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 14;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        whiteKeyLabels.add(A2, gridBagConstraints);

        B2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        B2.setText("B");
        B2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        B2.setMaximumSize(new java.awt.Dimension(20, 14));
        B2.setMinimumSize(new java.awt.Dimension(20, 14));
        B2.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 15;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        whiteKeyLabels.add(B2, gridBagConstraints);

        C3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        C3.setText("C");
        C3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        C3.setMaximumSize(new java.awt.Dimension(20, 14));
        C3.setMinimumSize(new java.awt.Dimension(20, 14));
        C3.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 16;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        whiteKeyLabels.add(C3, gridBagConstraints);

        D3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        D3.setLabelFor(keyD4);
        D3.setText("D");
        D3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        D3.setMaximumSize(new java.awt.Dimension(20, 14));
        D3.setMinimumSize(new java.awt.Dimension(20, 14));
        D3.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 17;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        whiteKeyLabels.add(D3, gridBagConstraints);

        E3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        E3.setText("E");
        E3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        E3.setMaximumSize(new java.awt.Dimension(20, 14));
        E3.setMinimumSize(new java.awt.Dimension(20, 14));
        E3.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 18;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        whiteKeyLabels.add(E3, gridBagConstraints);

        F3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        F3.setText("F");
        F3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        F3.setMaximumSize(new java.awt.Dimension(20, 14));
        F3.setMinimumSize(new java.awt.Dimension(20, 14));
        F3.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 19;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        whiteKeyLabels.add(F3, gridBagConstraints);

        G3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        G3.setText("G");
        G3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        G3.setMaximumSize(new java.awt.Dimension(20, 14));
        G3.setMinimumSize(new java.awt.Dimension(20, 14));
        G3.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 20;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        whiteKeyLabels.add(G3, gridBagConstraints);

        A3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        A3.setText("A");
        A3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        A3.setMaximumSize(new java.awt.Dimension(20, 14));
        A3.setMinimumSize(new java.awt.Dimension(20, 14));
        A3.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 21;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        whiteKeyLabels.add(A3, gridBagConstraints);

        B3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        B3.setText("B");
        B3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        B3.setMaximumSize(new java.awt.Dimension(20, 14));
        B3.setMinimumSize(new java.awt.Dimension(20, 14));
        B3.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 22;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        whiteKeyLabels.add(B3, gridBagConstraints);

        C4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        C4.setText("C");
        C4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        C4.setMaximumSize(new java.awt.Dimension(20, 14));
        C4.setMinimumSize(new java.awt.Dimension(20, 14));
        C4.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 23;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        whiteKeyLabels.add(C4, gridBagConstraints);

        D4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        D4.setLabelFor(keyD4);
        D4.setText("D");
        D4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        D4.setMaximumSize(new java.awt.Dimension(20, 14));
        D4.setMinimumSize(new java.awt.Dimension(20, 14));
        D4.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 24;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        whiteKeyLabels.add(D4, gridBagConstraints);

        E4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        E4.setText("E");
        E4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        E4.setMaximumSize(new java.awt.Dimension(20, 14));
        E4.setMinimumSize(new java.awt.Dimension(20, 14));
        E4.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 25;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        whiteKeyLabels.add(E4, gridBagConstraints);

        F4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        F4.setText("F");
        F4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        F4.setMaximumSize(new java.awt.Dimension(20, 14));
        F4.setMinimumSize(new java.awt.Dimension(20, 14));
        F4.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 26;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        whiteKeyLabels.add(F4, gridBagConstraints);

        G4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        G4.setText("G");
        G4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        G4.setMaximumSize(new java.awt.Dimension(20, 14));
        G4.setMinimumSize(new java.awt.Dimension(20, 14));
        G4.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 27;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        whiteKeyLabels.add(G4, gridBagConstraints);

        A4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        A4.setText("A");
        A4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        A4.setMaximumSize(new java.awt.Dimension(20, 14));
        A4.setMinimumSize(new java.awt.Dimension(20, 14));
        A4.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 28;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        whiteKeyLabels.add(A4, gridBagConstraints);

        B4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        B4.setText("B");
        B4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        B4.setMaximumSize(new java.awt.Dimension(20, 14));
        B4.setMinimumSize(new java.awt.Dimension(20, 14));
        B4.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 29;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        whiteKeyLabels.add(B4, gridBagConstraints);

        C5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        C5.setText("C");
        C5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        C5.setMaximumSize(new java.awt.Dimension(20, 14));
        C5.setMinimumSize(new java.awt.Dimension(20, 14));
        C5.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 30;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        whiteKeyLabels.add(C5, gridBagConstraints);

        D5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        D5.setLabelFor(keyD4);
        D5.setText("D");
        D5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        D5.setMaximumSize(new java.awt.Dimension(20, 14));
        D5.setMinimumSize(new java.awt.Dimension(20, 14));
        D5.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 31;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        whiteKeyLabels.add(D5, gridBagConstraints);

        E5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        E5.setText("E");
        E5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        E5.setMaximumSize(new java.awt.Dimension(20, 14));
        E5.setMinimumSize(new java.awt.Dimension(20, 14));
        E5.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 32;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        whiteKeyLabels.add(E5, gridBagConstraints);

        F5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        F5.setText("F");
        F5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        F5.setMaximumSize(new java.awt.Dimension(20, 14));
        F5.setMinimumSize(new java.awt.Dimension(20, 14));
        F5.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 33;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        whiteKeyLabels.add(F5, gridBagConstraints);

        G5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        G5.setText("G");
        G5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        G5.setMaximumSize(new java.awt.Dimension(20, 14));
        G5.setMinimumSize(new java.awt.Dimension(20, 14));
        G5.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 34;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        whiteKeyLabels.add(G5, gridBagConstraints);

        A5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        A5.setText("A");
        A5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        A5.setMaximumSize(new java.awt.Dimension(20, 14));
        A5.setMinimumSize(new java.awt.Dimension(20, 14));
        A5.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 35;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        whiteKeyLabels.add(A5, gridBagConstraints);

        B5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        B5.setText("B");
        B5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        B5.setMaximumSize(new java.awt.Dimension(20, 14));
        B5.setMinimumSize(new java.awt.Dimension(20, 14));
        B5.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 36;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        whiteKeyLabels.add(B5, gridBagConstraints);

        C6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        C6.setText("C");
        C6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        C6.setMaximumSize(new java.awt.Dimension(20, 14));
        C6.setMinimumSize(new java.awt.Dimension(20, 14));
        C6.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 37;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        whiteKeyLabels.add(C6, gridBagConstraints);

        D6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        D6.setLabelFor(keyD4);
        D6.setText("D");
        D6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        D6.setMaximumSize(new java.awt.Dimension(20, 14));
        D6.setMinimumSize(new java.awt.Dimension(20, 14));
        D6.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 38;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        whiteKeyLabels.add(D6, gridBagConstraints);

        E6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        E6.setText("E");
        E6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        E6.setMaximumSize(new java.awt.Dimension(20, 14));
        E6.setMinimumSize(new java.awt.Dimension(20, 14));
        E6.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 39;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        whiteKeyLabels.add(E6, gridBagConstraints);

        F6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        F6.setText("F");
        F6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        F6.setMaximumSize(new java.awt.Dimension(20, 14));
        F6.setMinimumSize(new java.awt.Dimension(20, 14));
        F6.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 40;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        whiteKeyLabels.add(F6, gridBagConstraints);

        G6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        G6.setText("G");
        G6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        G6.setMaximumSize(new java.awt.Dimension(20, 14));
        G6.setMinimumSize(new java.awt.Dimension(20, 14));
        G6.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 41;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        whiteKeyLabels.add(G6, gridBagConstraints);

        A6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        A6.setText("A");
        A6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        A6.setMaximumSize(new java.awt.Dimension(20, 14));
        A6.setMinimumSize(new java.awt.Dimension(20, 14));
        A6.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 42;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        whiteKeyLabels.add(A6, gridBagConstraints);

        B6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        B6.setText("B");
        B6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        B6.setMaximumSize(new java.awt.Dimension(20, 14));
        B6.setMinimumSize(new java.awt.Dimension(20, 14));
        B6.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 43;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        whiteKeyLabels.add(B6, gridBagConstraints);

        C7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        C7.setText("C");
        C7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        C7.setMaximumSize(new java.awt.Dimension(20, 14));
        C7.setMinimumSize(new java.awt.Dimension(20, 14));
        C7.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 44;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        whiteKeyLabels.add(C7, gridBagConstraints);

        D7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        D7.setLabelFor(keyD4);
        D7.setText("D");
        D7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        D7.setMaximumSize(new java.awt.Dimension(20, 14));
        D7.setMinimumSize(new java.awt.Dimension(20, 14));
        D7.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 45;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        whiteKeyLabels.add(D7, gridBagConstraints);

        E7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        E7.setText("E");
        E7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        E7.setMaximumSize(new java.awt.Dimension(20, 14));
        E7.setMinimumSize(new java.awt.Dimension(20, 14));
        E7.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 46;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        whiteKeyLabels.add(E7, gridBagConstraints);

        F7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        F7.setText("F");
        F7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        F7.setMaximumSize(new java.awt.Dimension(20, 14));
        F7.setMinimumSize(new java.awt.Dimension(20, 14));
        F7.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 47;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        whiteKeyLabels.add(F7, gridBagConstraints);

        G7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        G7.setText("G");
        G7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        G7.setMaximumSize(new java.awt.Dimension(20, 14));
        G7.setMinimumSize(new java.awt.Dimension(20, 14));
        G7.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 48;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        whiteKeyLabels.add(G7, gridBagConstraints);

        A7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        A7.setText("A");
        A7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        A7.setMaximumSize(new java.awt.Dimension(20, 14));
        A7.setMinimumSize(new java.awt.Dimension(20, 14));
        A7.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 49;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        whiteKeyLabels.add(A7, gridBagConstraints);

        B7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        B7.setText("B");
        B7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        B7.setMaximumSize(new java.awt.Dimension(20, 14));
        B7.setMinimumSize(new java.awt.Dimension(20, 14));
        B7.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 50;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        whiteKeyLabels.add(B7, gridBagConstraints);

        C8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        C8.setText("C");
        C8.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        C8.setMaximumSize(new java.awt.Dimension(20, 14));
        C8.setMinimumSize(new java.awt.Dimension(20, 14));
        C8.setPreferredSize(new java.awt.Dimension(20, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 51;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        whiteKeyLabels.add(C8, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        keyNamesPanel.add(whiteKeyLabels, gridBagConstraints);

        blackKeyLabels.setAlignmentX(0.0F);
        blackKeyLabels.setMinimumSize(new java.awt.Dimension(1025, 14));
        blackKeyLabels.setOpaque(false);
        blackKeyLabels.setPreferredSize(new java.awt.Dimension(1025, 100));
        blackKeyLabels.setLayout(new java.awt.GridBagLayout());

        Bb0.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Bb0.setText("Bb");
        Bb0.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Bb0.setMaximumSize(new java.awt.Dimension(40, 14));
        Bb0.setMinimumSize(new java.awt.Dimension(40, 14));
        Bb0.setPreferredSize(new java.awt.Dimension(40, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 1);
        blackKeyLabels.add(Bb0, gridBagConstraints);

        Csharp1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        Csharp1.setText("C#");
        Csharp1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Csharp1.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        Csharp1.setMaximumSize(new java.awt.Dimension(30, 14));
        Csharp1.setMinimumSize(new java.awt.Dimension(30, 14));
        Csharp1.setPreferredSize(new java.awt.Dimension(30, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        blackKeyLabels.add(Csharp1, gridBagConstraints);

        Eb1.setText(" Eb");
        Eb1.setMaximumSize(new java.awt.Dimension(30, 14));
        Eb1.setMinimumSize(new java.awt.Dimension(30, 14));
        Eb1.setPreferredSize(new java.awt.Dimension(30, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        blackKeyLabels.add(Eb1, gridBagConstraints);

        Fsharp1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        Fsharp1.setText("F#");
        Fsharp1.setMaximumSize(new java.awt.Dimension(27, 14));
        Fsharp1.setMinimumSize(new java.awt.Dimension(27, 14));
        Fsharp1.setPreferredSize(new java.awt.Dimension(27, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        blackKeyLabels.add(Fsharp1, gridBagConstraints);

        Gsharp1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Gsharp1.setText("G#");
        Gsharp1.setMaximumSize(new java.awt.Dimension(26, 14));
        Gsharp1.setMinimumSize(new java.awt.Dimension(26, 14));
        Gsharp1.setPreferredSize(new java.awt.Dimension(26, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        blackKeyLabels.add(Gsharp1, gridBagConstraints);

        Bb1.setText("Bb");
        Bb1.setMaximumSize(new java.awt.Dimension(27, 14));
        Bb1.setMinimumSize(new java.awt.Dimension(27, 14));
        Bb1.setPreferredSize(new java.awt.Dimension(27, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        blackKeyLabels.add(Bb1, gridBagConstraints);

        Csharp2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        Csharp2.setText("C#");
        Csharp2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Csharp2.setMaximumSize(new java.awt.Dimension(30, 14));
        Csharp2.setMinimumSize(new java.awt.Dimension(30, 14));
        Csharp2.setPreferredSize(new java.awt.Dimension(30, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        blackKeyLabels.add(Csharp2, gridBagConstraints);

        Eb2.setText(" Eb");
        Eb2.setMaximumSize(new java.awt.Dimension(30, 14));
        Eb2.setMinimumSize(new java.awt.Dimension(30, 14));
        Eb2.setPreferredSize(new java.awt.Dimension(30, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        blackKeyLabels.add(Eb2, gridBagConstraints);

        Fsharp2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        Fsharp2.setText("F#");
        Fsharp2.setMaximumSize(new java.awt.Dimension(27, 14));
        Fsharp2.setMinimumSize(new java.awt.Dimension(27, 14));
        Fsharp2.setPreferredSize(new java.awt.Dimension(27, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        blackKeyLabels.add(Fsharp2, gridBagConstraints);

        Gsharp2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Gsharp2.setText("G#");
        Gsharp2.setMaximumSize(new java.awt.Dimension(26, 14));
        Gsharp2.setMinimumSize(new java.awt.Dimension(26, 14));
        Gsharp2.setPreferredSize(new java.awt.Dimension(26, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        blackKeyLabels.add(Gsharp2, gridBagConstraints);

        Bb2.setText("Bb");
        Bb2.setMaximumSize(new java.awt.Dimension(27, 14));
        Bb2.setMinimumSize(new java.awt.Dimension(27, 14));
        Bb2.setPreferredSize(new java.awt.Dimension(27, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        blackKeyLabels.add(Bb2, gridBagConstraints);

        Csharp3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        Csharp3.setText("C#");
        Csharp3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Csharp3.setMaximumSize(new java.awt.Dimension(30, 14));
        Csharp3.setMinimumSize(new java.awt.Dimension(30, 14));
        Csharp3.setPreferredSize(new java.awt.Dimension(30, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 11;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        blackKeyLabels.add(Csharp3, gridBagConstraints);

        Eb3.setText(" Eb");
        Eb3.setMaximumSize(new java.awt.Dimension(30, 14));
        Eb3.setMinimumSize(new java.awt.Dimension(30, 14));
        Eb3.setPreferredSize(new java.awt.Dimension(30, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 12;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        blackKeyLabels.add(Eb3, gridBagConstraints);

        Fsharp3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        Fsharp3.setText("F#");
        Fsharp3.setMaximumSize(new java.awt.Dimension(27, 14));
        Fsharp3.setMinimumSize(new java.awt.Dimension(27, 14));
        Fsharp3.setPreferredSize(new java.awt.Dimension(27, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 13;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        blackKeyLabels.add(Fsharp3, gridBagConstraints);

        Gsharp3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Gsharp3.setText("G#");
        Gsharp3.setMaximumSize(new java.awt.Dimension(26, 14));
        Gsharp3.setMinimumSize(new java.awt.Dimension(26, 14));
        Gsharp3.setPreferredSize(new java.awt.Dimension(26, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 14;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        blackKeyLabels.add(Gsharp3, gridBagConstraints);

        Bb3.setText("Bb");
        Bb3.setMaximumSize(new java.awt.Dimension(27, 14));
        Bb3.setMinimumSize(new java.awt.Dimension(27, 14));
        Bb3.setPreferredSize(new java.awt.Dimension(27, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 15;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        blackKeyLabels.add(Bb3, gridBagConstraints);

        Csharp4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        Csharp4.setText("C#");
        Csharp4.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Csharp4.setMaximumSize(new java.awt.Dimension(30, 14));
        Csharp4.setMinimumSize(new java.awt.Dimension(30, 14));
        Csharp4.setPreferredSize(new java.awt.Dimension(30, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 16;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        blackKeyLabels.add(Csharp4, gridBagConstraints);

        Eb4.setText(" Eb");
        Eb4.setMaximumSize(new java.awt.Dimension(30, 14));
        Eb4.setMinimumSize(new java.awt.Dimension(30, 14));
        Eb4.setPreferredSize(new java.awt.Dimension(30, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 17;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        blackKeyLabels.add(Eb4, gridBagConstraints);

        Fsharp4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        Fsharp4.setText("F#");
        Fsharp4.setMaximumSize(new java.awt.Dimension(27, 14));
        Fsharp4.setMinimumSize(new java.awt.Dimension(27, 14));
        Fsharp4.setPreferredSize(new java.awt.Dimension(27, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 18;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        blackKeyLabels.add(Fsharp4, gridBagConstraints);

        Gsharp4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Gsharp4.setText("G#");
        Gsharp4.setMaximumSize(new java.awt.Dimension(26, 14));
        Gsharp4.setMinimumSize(new java.awt.Dimension(26, 14));
        Gsharp4.setPreferredSize(new java.awt.Dimension(26, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 19;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        blackKeyLabels.add(Gsharp4, gridBagConstraints);

        Bb4.setText("Bb");
        Bb4.setMaximumSize(new java.awt.Dimension(27, 14));
        Bb4.setMinimumSize(new java.awt.Dimension(27, 14));
        Bb4.setPreferredSize(new java.awt.Dimension(27, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 20;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        blackKeyLabels.add(Bb4, gridBagConstraints);

        Csharp5.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        Csharp5.setText("C#");
        Csharp5.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Csharp5.setMaximumSize(new java.awt.Dimension(30, 14));
        Csharp5.setMinimumSize(new java.awt.Dimension(30, 14));
        Csharp5.setPreferredSize(new java.awt.Dimension(30, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 21;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        blackKeyLabels.add(Csharp5, gridBagConstraints);

        Eb5.setText(" Eb");
        Eb5.setMaximumSize(new java.awt.Dimension(30, 14));
        Eb5.setMinimumSize(new java.awt.Dimension(30, 14));
        Eb5.setPreferredSize(new java.awt.Dimension(30, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 22;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        blackKeyLabels.add(Eb5, gridBagConstraints);

        Fsharp5.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        Fsharp5.setText("F#");
        Fsharp5.setMaximumSize(new java.awt.Dimension(27, 14));
        Fsharp5.setMinimumSize(new java.awt.Dimension(27, 14));
        Fsharp5.setPreferredSize(new java.awt.Dimension(27, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 23;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        blackKeyLabels.add(Fsharp5, gridBagConstraints);

        Gsharp5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Gsharp5.setText("G#");
        Gsharp5.setMaximumSize(new java.awt.Dimension(26, 14));
        Gsharp5.setMinimumSize(new java.awt.Dimension(26, 14));
        Gsharp5.setPreferredSize(new java.awt.Dimension(26, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 24;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        blackKeyLabels.add(Gsharp5, gridBagConstraints);

        Bb5.setText("Bb");
        Bb5.setMaximumSize(new java.awt.Dimension(27, 14));
        Bb5.setMinimumSize(new java.awt.Dimension(27, 14));
        Bb5.setPreferredSize(new java.awt.Dimension(27, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 25;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        blackKeyLabels.add(Bb5, gridBagConstraints);

        Csharp6.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        Csharp6.setText("C#");
        Csharp6.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Csharp6.setMaximumSize(new java.awt.Dimension(30, 14));
        Csharp6.setMinimumSize(new java.awt.Dimension(30, 14));
        Csharp6.setPreferredSize(new java.awt.Dimension(30, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 26;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        blackKeyLabels.add(Csharp6, gridBagConstraints);

        Eb6.setText(" Eb");
        Eb6.setMaximumSize(new java.awt.Dimension(30, 14));
        Eb6.setMinimumSize(new java.awt.Dimension(30, 14));
        Eb6.setPreferredSize(new java.awt.Dimension(30, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 27;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        blackKeyLabels.add(Eb6, gridBagConstraints);

        Fsharp6.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        Fsharp6.setText("F#");
        Fsharp6.setMaximumSize(new java.awt.Dimension(27, 14));
        Fsharp6.setMinimumSize(new java.awt.Dimension(27, 14));
        Fsharp6.setPreferredSize(new java.awt.Dimension(27, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 28;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        blackKeyLabels.add(Fsharp6, gridBagConstraints);

        Gsharp6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Gsharp6.setText("G#");
        Gsharp6.setMaximumSize(new java.awt.Dimension(26, 14));
        Gsharp6.setMinimumSize(new java.awt.Dimension(26, 14));
        Gsharp6.setPreferredSize(new java.awt.Dimension(26, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 29;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        blackKeyLabels.add(Gsharp6, gridBagConstraints);

        Bb6.setText("Bb");
        Bb6.setMaximumSize(new java.awt.Dimension(27, 14));
        Bb6.setMinimumSize(new java.awt.Dimension(27, 14));
        Bb6.setPreferredSize(new java.awt.Dimension(27, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 30;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        blackKeyLabels.add(Bb6, gridBagConstraints);

        Csharp7.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        Csharp7.setText("C#");
        Csharp7.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Csharp7.setMaximumSize(new java.awt.Dimension(30, 14));
        Csharp7.setMinimumSize(new java.awt.Dimension(30, 14));
        Csharp7.setPreferredSize(new java.awt.Dimension(30, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 31;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        blackKeyLabels.add(Csharp7, gridBagConstraints);

        Eb7.setText(" Eb");
        Eb7.setMaximumSize(new java.awt.Dimension(30, 14));
        Eb7.setMinimumSize(new java.awt.Dimension(30, 14));
        Eb7.setPreferredSize(new java.awt.Dimension(30, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 32;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        blackKeyLabels.add(Eb7, gridBagConstraints);

        Fsharp7.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        Fsharp7.setText("F#");
        Fsharp7.setMaximumSize(new java.awt.Dimension(27, 14));
        Fsharp7.setMinimumSize(new java.awt.Dimension(27, 14));
        Fsharp7.setPreferredSize(new java.awt.Dimension(27, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 33;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        blackKeyLabels.add(Fsharp7, gridBagConstraints);

        Gsharp7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Gsharp7.setText("G#");
        Gsharp7.setMaximumSize(new java.awt.Dimension(26, 14));
        Gsharp7.setMinimumSize(new java.awt.Dimension(26, 14));
        Gsharp7.setPreferredSize(new java.awt.Dimension(26, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 34;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        blackKeyLabels.add(Gsharp7, gridBagConstraints);

        Bb7.setText("Bb");
        Bb7.setMaximumSize(new java.awt.Dimension(27, 14));
        Bb7.setMinimumSize(new java.awt.Dimension(27, 14));
        Bb7.setPreferredSize(new java.awt.Dimension(27, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 35;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        blackKeyLabels.add(Bb7, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        keyNamesPanel.add(blackKeyLabels, gridBagConstraints);

        presentChordDisplay.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        presentChordDisplay.setForeground(new java.awt.Color(0, 153, 0));
        presentChordDisplay.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        presentChordDisplay.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        presentChordDisplay.setMaximumSize(new java.awt.Dimension(175, 30));
        presentChordDisplay.setMinimumSize(new java.awt.Dimension(175, 30));
        presentChordDisplay.setPreferredSize(new java.awt.Dimension(175, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        keyNamesPanel.add(presentChordDisplay, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(keyNamesPanel, gridBagConstraints);

        optionsMenu.setText("Options");

        clearKeyboardMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, 0));
        clearKeyboardMI.setText("Clear Keyboard");
        clearKeyboardMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearKeyboardMIActionPerformed(evt);
            }
        });
        optionsMenu.add(clearKeyboardMI);

        resetChordDisplayMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, 0));
        resetChordDisplayMI.setText("Reset Chord Display");
        resetChordDisplayMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetChordDisplayMIActionPerformed(evt);
            }
        });
        optionsMenu.add(resetChordDisplayMI);

        playChordMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, 0));
        playChordMI.setText("Play Chord");
        playChordMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playChordMIActionPerformed(evt);
            }
        });
        optionsMenu.add(playChordMI);

        addToSequenceMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, 0));
        addToSequenceMI.setText("Add to Sequence");
        addToSequenceMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToSequenceMIActionPerformed(evt);
            }
        });
        optionsMenu.add(addToSequenceMI);

        turnOnOffKeyLabelsMI.setBackground(new java.awt.Color(230, 230, 230));
        turnOnOffKeyLabelsMI.setSelected(true);
        turnOnOffKeyLabelsMI.setText("Turn On/Off Key Labels");
        turnOnOffKeyLabelsMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                turnOnOffKeyLabelsMIActionPerformed(evt);
            }
        });
        optionsMenu.add(turnOnOffKeyLabelsMI);

        jMenuBar1.add(optionsMenu);

        voicingModeMenu.setText("Mode");

        singleNoteModeMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_1, 0));
        singleNoteModeMI.setText("Single Note");
        singleNoteModeMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                singleNoteModeMIActionPerformed(evt);
            }
        });
        voicingModeMenu.add(singleNoteModeMI);

        chordModeMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_2, 0));
        chordModeMI.setText("Chords");
        chordModeMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chordModeMIActionPerformed(evt);
            }
        });
        voicingModeMenu.add(chordModeMI);

        jMenuBar1.add(voicingModeMenu);

        voicingTransposeMenu.setText("Transpose");

        upHalfStepMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, 0));
        upHalfStepMI.setBackground(new java.awt.Color(236, 233, 216));
        upHalfStepMI.setText("Up half step");
        upHalfStepMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upHalfStepMIActionPerformed(evt);
            }
        });
        voicingTransposeMenu.add(upHalfStepMI);

        downHalfStepMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, 0));
        downHalfStepMI.setBackground(new java.awt.Color(236, 233, 216));
        downHalfStepMI.setText("Down half step");
        downHalfStepMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downHalfStepMIActionPerformed(evt);
            }
        });
        voicingTransposeMenu.add(downHalfStepMI);
        voicingTransposeMenu.add(jSeparator1);

        upOctaveMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, 0));
        upOctaveMI.setBackground(new java.awt.Color(236, 233, 216));
        upOctaveMI.setText("Up octave");
        upOctaveMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upOctaveMIActionPerformed(evt);
            }
        });
        voicingTransposeMenu.add(upOctaveMI);

        downOctaveMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, 0));
        downOctaveMI.setBackground(new java.awt.Color(236, 233, 216));
        downOctaveMI.setText("Down octave");
        downOctaveMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downOctaveMIActionPerformed(evt);
            }
        });
        voicingTransposeMenu.add(downOctaveMI);

        jMenuBar1.add(voicingTransposeMenu);

        playbackMenu.setText("Playback");

        startPlayMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, 0));
        startPlayMI.setText("Start play");
        startPlayMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startPlayMIActionPerformed(evt);
            }
        });
        playbackMenu.add(startPlayMI);

        pausePlayMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, 0));
        pausePlayMI.setText("Pause play");
        pausePlayMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pausePlayMIActionPerformed(evt);
            }
        });
        playbackMenu.add(pausePlayMI);

        stopPlayMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_K, 0));
        stopPlayMI.setText("Stop play");
        stopPlayMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopPlayMIActionPerformed(evt);
            }
        });
        playbackMenu.add(stopPlayMI);

        startSelPlayMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ENTER, 0));
        startSelPlayMI.setText("Start selection play");
        startSelPlayMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startSelPlayMIActionPerformed(evt);
            }
        });
        playbackMenu.add(startSelPlayMI);

        stopSelPlayMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ENTER, java.awt.event.InputEvent.SHIFT_MASK));
        stopSelPlayMI.setText("Play from selection to end");
        stopSelPlayMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopSelPlayMIActionPerformed(evt);
            }
        });
        playbackMenu.add(stopSelPlayMI);

        jMenuBar1.add(playbackMenu);

        windowMenu.setMnemonic('W');
        windowMenu.setText("Window");
        windowMenu.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                windowMenuMenuSelected(evt);
            }

            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }

            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
        });

        closeWindowMI.setMnemonic('C');
        closeWindowMI.setText("Close Window");
        closeWindowMI.setToolTipText("Closes the current window (exits program if there are no other windows)");
        closeWindowMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeWindowMIActionPerformed(evt);
            }
        });
        windowMenu.add(closeWindowMI);

        cascadeMI.setMnemonic('A');
        cascadeMI.setText("Cascade Windows");
        cascadeMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cascadeMIActionPerformed(evt);
            }
        });
        windowMenu.add(cascadeMI);
        windowMenu.add(windowMenuSeparator);

        jMenuBar1.add(windowMenu);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Getting the piano key images.
     */
    public javax.swing.ImageIcon whiteKey =
            new javax.swing.ImageIcon(
                    getClass().getResource("/graphics/whitekey.jpg"));

    public javax.swing.ImageIcon whiteKeyPressed =
            new javax.swing.ImageIcon(
                    getClass().getResource("/graphics/whitekeypressed.jpg"));

    public javax.swing.ImageIcon blackKey =
            new javax.swing.ImageIcon(
                    getClass().getResource("/graphics/blackkey.jpg"));

    public javax.swing.ImageIcon blackKeyPressed =
            new javax.swing.ImageIcon(
                    getClass().getResource("/graphics/blackkeypressed.jpg"));

    public javax.swing.ImageIcon bassKey =
            new javax.swing.ImageIcon(
                    getClass().getResource("/graphics/rootkey.jpg"));

    public javax.swing.ImageIcon bassKeyPressed =
            new javax.swing.ImageIcon(
                    getClass().getResource("/graphics/rootkeypressed.jpg"));

    public javax.swing.ImageIcon blackBassKey =
            new javax.swing.ImageIcon(
                    getClass().getResource("/graphics/blackrootkey.jpg"));

    public javax.swing.ImageIcon blackBassKeyPressed =
            new javax.swing.ImageIcon(
                    getClass().getResource("/graphics/blackrootkeypressed.jpg"));

    public javax.swing.ImageIcon staffIcon =
            new javax.swing.ImageIcon(
                    getClass().getResource("/graphics/staff.gif"));

    public javax.swing.ImageIcon clefsIcon =
            new javax.swing.ImageIcon(
                    getClass().getResource("/graphics/clefs.gif"));

    public final javax.swing.ImageIcon wholeNoteIcon =
            new javax.swing.ImageIcon(
                    getClass().getResource("/graphics/wholeNote.gif"));

    public javax.swing.ImageIcon sharpIcon =
            new javax.swing.ImageIcon(
                    getClass().getResource("/graphics/sharp.gif"));

    public javax.swing.ImageIcon flatIcon =
            new javax.swing.ImageIcon(
                    getClass().getResource("/graphics/flat.gif"));

    public javax.swing.ImageIcon staffEndIcon =
            new javax.swing.ImageIcon(
                    getClass().getResource("/graphics/endStaff.gif"));

    public JLabel staff = new JLabel(staffIcon);
    public JLabel clefs = new JLabel(clefsIcon);
    //public JLabel wholeNote = new JLabel(wholeNoteIcon);
    public JLabel sharp = new JLabel(sharpIcon);
    public JLabel flat = new JLabel(flatIcon);
    public JLabel staffEnd = new JLabel(staffEndIcon);

    /**
     * Setting some useful constants.
     */

    public boolean playback = false;    // true if keyboard is in playback mode

    public boolean[] currentVoicing = makeValueArray();

    public final int BKHEIGHT = 80;     // height of a black key

    public final int BKWIDTH = 14;      // width of a black key

    public final int WKWIDTH = 20;      // width of a white key

    public final int WKHEIGHT = 120;    // height of a white key

    public final int OCTAVE = 140;      // width of an octave

    public final int OCTKEYS = 7;       // 7 white keys per octave

    public final int P_OCTAVE = 12;     // 12 notes per octave

    public final int A = 21;            // MIDI value of 1st key on keyboard

    public final int C_EIGHTH = 108;    // MIDI value of last key on keyboard

    public final String CTRLCLICK = "Ctrl+Button1";

    public final String SHIFTCLICK = "Shift+Button1";

    public final String CTRLSHFTCLICK = "Ctrl+Shift+Button1";

    public final String NO_MODIFIER = "";

    public final String FROM_MIDI_KEYBOARD = "from MIDI keyboard";

    public final String SHARP = "#";

    public final String FLAT = "b";

    public final String ADDTOSEQ = "A";

    public final String BACKSPACE = "Backspace";

    public final String PLAYCHORD = "P";

    public final String EMPTY = "";

    public final String UP = "up";

    public final String DOWN = "down";

    private long LAST_MIDI_ENTRY = 0;

    private long CHORD_GAP = 1000; // The amount of time (in milliseconds) that must
    // elapse between two keys played on the MIDI
    // keyboard in order for the keyboard to be
    // cleared.

    private void keyboardLPMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_keyboardLPMouseClicked

        playback = false;

        // Getting the position of the mouse click
        int y = evt.getY();
        int x = evt.getX();

        if (y < WKHEIGHT && !playback) {
            // True if the user clicked a black key.
            boolean blackPianoKey = false;

            // Determines the key number
            int keyNum = x / WKWIDTH;

            int note = keyNum;

            // gives the octave number (ex. 4 in C4 for middle C) by
            // determining where midi is in relation to the pixel width of an octave
            int octave = ((x + 5 * WKWIDTH) / OCTAVE);

            // Only occurs if the click is at a y position that could be a black key
            if (y < BKHEIGHT) {
                // find the position of the click within the key
                int inKey = x - keyNum * WKWIDTH;

                // if click is in right half of black key
                if (inKey < (BKWIDTH / 2 + 1)) {
                    blackPianoKey = true;
                    note -= 1;

                    // not on a black key if note number is 1 or 4
                    if (note % OCTKEYS == 1 || note % OCTKEYS == 4) {
                        blackPianoKey = false;
                    }
                }

                // if click is in left half of black key
                else if (inKey > WKWIDTH - (BKWIDTH / 2 + 1)) {
                    blackPianoKey = true;
                    note = keyNum;

                    // not on a black key if note number is 1 or 4
                    if (note % OCTKEYS == 1 || note % OCTKEYS == 4) {
                        blackPianoKey = false;
                    }
                }
            }

            // determine the MIDI value of the note clicked
            int baseMidi = 0;

            int oct = note - OCTKEYS * (octave - 1);

            if (octave == 0) {
                oct = note - OCTKEYS * octave;
            }

            // if the note is a black key
            if (blackPianoKey) {
                switch (oct) {
                    case 0:
                        baseMidi = A + 1;     //Bb
                        break;
                    case 2:
                        baseMidi = A + 4;     //C#
                        break;
                    case 3:
                        baseMidi = A + 6;     //Eb
                        break;
                    case 5:
                        baseMidi = A + 9;     //F#
                        break;
                    case 6:
                        baseMidi = A + 11;    //G#
                        break;
                    case 7:
                        baseMidi = A + 13;    //Bb
                        break;
                }
            }
            // if the note is not a black key
            else {
                switch (oct) {
                    case 0:
                        baseMidi = A;      //A
                        break;
                    case 1:
                        baseMidi = A + 2;  //B
                        break;
                    case 2:
                        baseMidi = A + 3;  //C
                        break;
                    case 3:
                        baseMidi = A + 5;  //D
                        break;
                    case 4:
                        baseMidi = A + 7;  //E
                        break;
                    case 5:
                        baseMidi = A + 8;  //F
                        break;
                    case 6:
                        baseMidi = A + 10; //G
                        break;
                    case 7:
                        baseMidi = A + 12; //A
                        break;
                    case 8:
                        baseMidi = A + 14; //B
                        break;
                }
            }

            // Adjust the MIDI value for different octaves
            int midiValue = baseMidi + P_OCTAVE * (octave - 1);

            if (octave == 0) {
                midiValue = baseMidi;
            }
            int m = evt.getModifiers();
            String mod = evt.getMouseModifiersText(m);
            setKeyboard(mod, midiValue);


        }
    }//GEN-LAST:event_keyboardLPMouseClicked

    public void setKeyboard(String mod, int midiValue) {
        // Pressing the keys and playing the notes
        PianoKey keyPlayed = pianoKeys()[midiValue - A];

        // to change bass note
        if (mod.equals(CTRLCLICK)) {
            String name = findBassName(midiValue);
            setBass(name, midiValue);
            notate.rebuildVoicingTable();
            return;
        }

        // to add extensions to voicings
        else if (mod.equals(CTRLSHFTCLICK)) {
            // if the key has been pressed, unpress it.
            if (keyPlayed.isPressed()) {
                keyPlayed.setPressed(false);
                keyPlayed.setAsExtension(false);
                int x = keyPlayed.getMIDI();
                labels[x - 21].setForeground(new Color(240, 240, 240));

            }
            // press the correct key
            else {
                keyPlayed.setPressed(true);
                keyPlayed.setAsExtension(true);
                int x = keyPlayed.getMIDI();
                labels[x - 21].setForeground(Color.black);
            }

            if (singleNoteMode) {
                pressSingleKey(keyPlayed);
                //labels adjusted directly in the method


            } else {
                pressKey(keyPlayed);
                //labels adjusted directly in the method

            }
            // display voicing in text field
            setVoicingEntryTFfromKeys();
            String s = notate.voicingEntryTFText();
            String c = notate.getChordRootTFText();
            notate.constructAndPlayChord(c, s);
        }

        // to change the bass note range
        else if (mod.equals(SHIFTCLICK)) {
            String name = keyPlayed.getName();
            String lowRange = notate.bassLowRangeTFText();
            String highRange = notate.bassHighRangeTFText();

            if (!lowRange.equals(EMPTY) && !highRange.equals(EMPTY)) {
                notate.setBassLowRangeTF(EMPTY);
                notate.setBassHighRangeTF(EMPTY);
                notate.setBassLowRangeTF(name);
            } else {
                NoteSymbol c = NoteSymbol.makeNoteSymbol(lowRange);
                int midi = c.getMIDI();

                if (midiValue > midi) {
                    notate.setBassHighRangeTF(name);
                } else {
                    notate.setBassLowRangeTF(name);
                    notate.setBassHighRangeTF(lowRange);
                }
                int root = findBass();
                name = findBassName(root);
                setBass(name, root);

                //labels[root-21].setForeground(Color.black); 
                notate.rebuildVoicingTable();
            }
            return;
        } else if (mod.equals(FROM_MIDI_KEYBOARD)) {
            long curTime = Calendar.getInstance().getTime().getTime();

            if (curTime - LAST_MIDI_ENTRY > CHORD_GAP) {
                clearKeyboard();
            }

            LAST_MIDI_ENTRY = curTime;

            keyPlayed.setPressed(true);

            if (singleNoteMode) {
                pressSingleKey(keyPlayed);
            } else {
                pressKey(keyPlayed);
            }

            // display voicing in text field
            setVoicingEntryTFfromKeys();
        }

        // if the key is just plain clicked
        else {
            // if the key has been pressed, unpress it.
            if (keyPlayed.isPressed()) {
                keyPlayed.setPressed(false);
            }
            // press the correct key
            else {
                keyPlayed.setPressed(true);
            }
            if (singleNoteMode) {
                pressSingleKey(keyPlayed);
            } else {
                pressKey(keyPlayed);
            }

            // display voicing in text field
            setVoicingEntryTFfromKeys();
            String s = notate.voicingEntryTFText();
            String c = notate.getChordRootTFText();
            notate.constructAndPlayChord(c, s);
            //voicingPrintDistanceMetrics();
        }
    }

    /**
     * Finds the highest note in a given voicing
     *
     * @param midiValues
     * @return the integer MIDI value of the highest note in a voicing
     */
    private int highestNote(Polylist midiValues) {
        int highNote = 0;

        for (Polylist L = midiValues; L.nonEmpty(); L = L.rest()) {
            NoteSymbol n = (NoteSymbol) L.first();
            int midi = n.getMIDI();
            if (midi >= highNote) {
                highNote = midi;
            }
        }
        return highNote;
    }

    /**
     * Finds the lowest note in a given voicing
     *
     * @param midiValues
     * @return the integer MIDI value of the lowest note in the voicing
     */
    private int lowestNote(Polylist midiValues) {
        int lowNote = C_EIGHTH;

        for (Polylist L = midiValues; L.nonEmpty(); L = L.rest()) {
            NoteSymbol n = (NoteSymbol) L.first();
            int midi = n.getMIDI();
            if (midi <= lowNote) {
                lowNote = midi;
            }
        }
        return lowNote;
    }

    /**
     * Transposes a given voicing up a half step
     *
     * @param v, a String representing a voicing
     */
    public void transposeUpHalfStep(String v) {
        if (v.equals(EMPTY)) {
            return;
        }

        String e = notate.extEntryTFText();
        Polylist voicing = notate.voicingToList(v);
        Polylist extension = notate.extensionToList(e);

        if (highestNote(voicing) + 1 > C_EIGHTH || highestNote(extension) + 1 > C_EIGHTH) {
            return;
        }

        clearKeyboard();
        notate.clearVoicingEntryTF();

        for (Polylist L = voicing; L.nonEmpty(); L = L.rest()) {
            if (extension.nonEmpty()) {
                NoteSymbol ex = (NoteSymbol) extension.first();

                int eMidiValue = ex.getMIDI() + 1;
                PianoKey eNote = pianoKeys()[eMidiValue - A];
                eNote.setPressed(true);
                pressKey(eNote);
                extension = extension.rest();
                notate.addExtEntryTFText(eNote.getName());
            }

            NoteSymbol n = (NoteSymbol) L.first();

            int vMidiValue = n.getMIDI() + 1;
            PianoKey vNote = pianoKeys()[vMidiValue - A];
            vNote.setPressed(true);
            pressKey(vNote);
            notate.addVoicingEntryTFText(vNote.getName());
        }
        int lowRange = notate.getLowerBound();
        int highRange = C_EIGHTH + 1;

        if (notate.bassHighRangeTFText().equals(EMPTY)) {
            highRange = setBassHighRange(lowRange);
        } else {
            highRange = notate.getUpperBound();
        }

        int r = findBass() + 1;
        if (r < lowRange) {
            int midi = r + P_OCTAVE;
            String note = findBassName(midi);
            setBass(note, midi);
        } else if (r > highRange) {
            int midi = r - P_OCTAVE;
            String note = findBassName(midi);
            setBass(note, midi);
        } else {
            String note = findBassName(r);
            setBass(note, r);
        }

        v = notate.voicingEntryTFText();
        String c = notate.getChordRootTFText();

        transposeRoot(c, lowRange, highRange, UP);

        notate.rebuildVoicingTable();

        notate.constructAndPlayChord(c, v);
    }

    /**
     * Transposes the current voicing up a half step.
     *
     * @param evt
     */
    private void upHalfStepMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upHalfStepMIActionPerformed

        String v = notate.voicingEntryTFText();
        transposeUpHalfStep(v);

    }//GEN-LAST:event_upHalfStepMIActionPerformed

    /**
     * Transposes a given voicing down a half step
     *
     * @param v, a String representing a voicing
     */
    public void transposeDownHalfStep(String v) {
        if (v.equals(EMPTY)) {
            return;
        }

        String e = notate.extEntryTFText();
        Polylist voicing = notate.voicingToList(v);
        Polylist extension = notate.extensionToList(e);

        if (lowestNote(voicing) - 1 < A || lowestNote(extension) - 1 < A) {
            return;
        }

        clearKeyboard();
        notate.clearVoicingEntryTF();

        for (Polylist L = voicing; L.nonEmpty(); L = L.rest()) {
            if (extension.nonEmpty()) {
                NoteSymbol ex = (NoteSymbol) extension.first();

                int eMidiValue = ex.getMIDI() - 1;
                PianoKey eNote = pianoKeys()[eMidiValue - A];
                eNote.setPressed(true);
                pressKey(eNote);
                extension = extension.rest();
                notate.addExtEntryTFText(eNote.getName());
            }

            NoteSymbol n = (NoteSymbol) L.first();

            int vMidiValue = n.getMIDI() - 1;
            PianoKey vNote = pianoKeys()[vMidiValue - A];
            vNote.setPressed(true);
            pressKey(vNote);
            notate.addVoicingEntryTFText(vNote.getName());
        }
        int lowRange = notate.getLowerBound();
        int highRange = C_EIGHTH + 1;

        if (notate.bassHighRangeTFText().equals(EMPTY)) {
            highRange = setBassHighRange(lowRange);
        } else {
            highRange = notate.getUpperBound();
        }

        int r = findBass() - 1;

        if (r < lowRange) {
            int midi = r + P_OCTAVE;
            String note = findBassName(midi);
            setBass(note, midi);
        } else if (r > highRange) {
            int midi = r - P_OCTAVE;
            String note = findBassName(midi);
            setBass(note, midi);
        } else {
            String note = findBassName(r);
            setBass(note, r);
        }


        v = notate.voicingEntryTFText();
        String c = notate.getChordRootTFText();

        transposeRoot(c, lowRange, highRange, DOWN);

        notate.rebuildVoicingTable();

        notate.constructAndPlayChord(c, v);
    }

    /**
     * Transposes the current voicing down a half step.
     *
     * @param evt
     */
    private void downHalfStepMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downHalfStepMIActionPerformed

        String v = notate.voicingEntryTFText();
        transposeDownHalfStep(v);
    }//GEN-LAST:event_downHalfStepMIActionPerformed

    /**
     * Transposes a given voicing up an octave
     *
     * @param v, a String representing a voicing
     */
    public void transposeUpOctave(String v) {
        if (v.equals(EMPTY)) {
            return;
        }

        String e = notate.extEntryTFText();
        Polylist voicing = notate.voicingToList(v);
        Polylist extension = notate.extensionToList(e);

        if (highestNote(voicing) + P_OCTAVE > C_EIGHTH ||
                highestNote(extension) + P_OCTAVE > C_EIGHTH) {
            return;
        }

        clearKeyboard();
        notate.clearVoicingEntryTF();

        for (Polylist L = voicing; L.nonEmpty(); L = L.rest()) {
            if (extension.nonEmpty()) {
                NoteSymbol ex = (NoteSymbol) extension.first();

                int eMidiValue = ex.getMIDI() + P_OCTAVE;
                PianoKey eNote = pianoKeys()[eMidiValue - A];
                eNote.setPressed(true);
                pressKey(eNote);
                extension = extension.rest();
                notate.addExtEntryTFText(eNote.getName());
            }

            NoteSymbol n = (NoteSymbol) L.first();

            int vMidiValue = n.getMIDI() + P_OCTAVE;
            PianoKey vNote = pianoKeys()[vMidiValue - A];
            vNote.setPressed(true);
            pressKey(vNote);
            notate.addVoicingEntryTFText(vNote.getName());
        }

        v = notate.voicingEntryTFText();
        String c = notate.getChordRootTFText();
        notate.constructAndPlayChord(c, v);
    }

    /**
     * Transposes the current voicing up an octave.
     *
     * @param evt
     */
    private void upOctaveMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upOctaveMIActionPerformed

        String v = notate.voicingEntryTFText();
        transposeUpOctave(v);

    }//GEN-LAST:event_upOctaveMIActionPerformed

    /**
     * Transposes a given voicing down an octave
     *
     * @param v, a String representing a voicing
     */
    public void transposeDownOctave(String v) {
        if (v.equals(EMPTY)) {
            return;
        }

        String e = notate.extEntryTFText();
        Polylist voicing = notate.voicingToList(v);
        Polylist extension = notate.extensionToList(e);

        if (lowestNote(voicing) - P_OCTAVE < A || lowestNote(extension) - P_OCTAVE < A) {
            return;
        }

        clearKeyboard();
        notate.clearVoicingEntryTF();

        for (Polylist L = voicing; L.nonEmpty(); L = L.rest()) {
            if (extension.nonEmpty()) {
                NoteSymbol ex = (NoteSymbol) extension.first();

                int eMidiValue = ex.getMIDI() - P_OCTAVE;
                PianoKey eNote = pianoKeys()[eMidiValue - A];
                eNote.setPressed(true);
                pressKey(eNote);
                extension = extension.rest();
                notate.addExtEntryTFText(eNote.getName());
            }

            NoteSymbol n = (NoteSymbol) L.first();

            int vMidiValue = n.getMIDI() - P_OCTAVE;
            PianoKey vNote = pianoKeys()[vMidiValue - A];
            vNote.setPressed(true);
            pressKey(vNote);
            notate.addVoicingEntryTFText(vNote.getName());
        }

        v = notate.voicingEntryTFText();
        String c = notate.getChordRootTFText();
        notate.constructAndPlayChord(c, v);
    }

    /**
     * Transposes the current voicing down an octave.
     *
     * @param evt
     */
    private void downOctaveMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downOctaveMIActionPerformed

        String v = notate.voicingEntryTFText();
        transposeDownOctave(v);

    }//GEN-LAST:event_downOctaveMIActionPerformed

    /**
     * Transposes the chord root based on the chord root text field and the bass range.
     *
     * @param root
     * @param lowRange
     * @param highRange
     * @param direction
     */
    public void transposeRoot(String chordRoot, int lowRange,
                              int highRange, String direction) {
        if (notate.rootEqualBassCheckboxChecked()) {
            return;
        }

        int midiValue = C_EIGHTH + 1;
        for (PianoKey pk : pianoKeys()) {
            String name = pk.getName();
            name = nameToBass(name);
            int midi = pk.getMIDI();
            if (name.equals(chordRoot)) {
                if (midi >= lowRange && midi <= highRange && midi < midiValue) {
                    midiValue = midi;
                }
            }
        }

        if (direction.equals(UP)) {
            midiValue += 1;
        } else {
            midiValue -= 1;
        }

        // ?? what if midiValue - A is out of range? It has happened. FIX!!

        PianoKey root = pianoKeys()[midiValue - A];
        String rootName = root.getName();
        rootName = nameToBass(rootName);

        notate.setChordRootTFText(rootName);

    }

    /**
     * Restores the keyboard to its original state.
     */
    public void clearKeyboard() {
        for (PianoKey pk : pianoKeys()) {
            if (pk.isPressed()) {
                pk.setPressed(false);
                pressKey(pk);
            }
            if (pk.isBass()) {
                Icon offIcon = pk.getOffIcon();
                JLabel label = pk.getLabel();
                label.setIcon(offIcon);
            }
        }
        presentChordDisplay.setText(EMPTY);
        setInvisible();
    }

    /**
     * Creates a boolean array for determining whether two voicings are equal
     *
     * @return
     */
    public static boolean[] makeValueArray() {
        boolean result[] = new boolean[128];
        for (boolean b : result) {
            b = false;
        }
        return result;
    }

    /**
     * Creates two boolean arrays of voicing v1 and voicing v2 and compares the
     * arrays
     *
     * @param v1
     * @param v2
     * @return true if v1 = v2, false otherwise
     */
    public boolean voicingsAreEqual(String v1, String v2) {
        boolean[] voicing1 = stringToMIDI(v1);
        boolean[] voicing2 = stringToMIDI(v2);

        boolean equal = false;
        int it = 0;
        while (voicing1[it] == voicing2[it]) {
            equal = true;
            if (it == voicing1.length - 1) {
                return equal;
            }
            it++;
        }

        equal = false;
        return equal;
    }

    /**
     * Enters a voicing into a boolean array
     *
     * @param v
     * @return a boolean array with the indices of the MIDI values of the entered
     * voicing set to true.
     */
    public boolean[] stringToMIDI(String v) {
        boolean[] result = makeValueArray();

        if (v.equals(EMPTY)) {
            return result;
        }

        StringReader voicingReader = new StringReader(v);
        Tokenizer in = new Tokenizer(voicingReader);
        Object o = in.nextSexp();
        //int index = ImproVisor.getCurrentWindow().getCurrentSelectionStart();
        Polylist voicing = (Polylist) o;

        while (voicing.nonEmpty()) {
            NoteSymbol n = NoteSymbol.makeNoteSymbol((String) voicing.first());
            int midi = n.getMIDI();

            result[midi] = true;

            voicing = voicing.rest();
        }

        return result;
    }

    /**
     * Transposes a String that represents a voicing
     *
     * @param v, the voicing to be transposed
     * @param direction, either "up" or "down"
     * @return a String, the transposition of v
     */
    public String transposeVoicing(String v, String direction) {
        boolean up = false;

        if (direction.equals("up")) {
            up = true;
        }
        String e = notate.extEntryTFText();
        Polylist voicing = notate.voicingToList(v);
        Polylist extension = notate.extensionToList(e);

        if (up) {
            if (highestNote(voicing) + P_OCTAVE > C_EIGHTH ||
                    highestNote(extension) + P_OCTAVE > C_EIGHTH) {
                return v;
            }
        } else {
            if (lowestNote(voicing) - P_OCTAVE < A ||
                    lowestNote(extension) - P_OCTAVE < A) {
                return v;
            }
        }
        Polylist P = new Polylist();
        for (Polylist L = voicing; L.nonEmpty(); L = L.rest()) {
            NoteSymbol n = (NoteSymbol) L.first();
            int midi = n.getMIDI();
            if (up) {
                midi = midi + P_OCTAVE;
            } else {
                midi = midi - P_OCTAVE;
            }
            PianoKey note = pianoKeys()[midi - A];
            String newNote = note.getName();
            P = P.cons(newNote);
        }
        String newVoicing = P.toString();
        return newVoicing;

    }

    /**
     * From the keyboard, finds the voicing currently displayed
     *
     * @return a String, the voicing.
     */
    public String voicingFromKeyboard() {
        String text = EMPTY;
        for (PianoKey i : pianoKeys()) {
            if (i.isPressed()) {
                String s = i.getName();
                if (text.equals(EMPTY)) {
                    text = "(" + s + ")";
                } else {
                    text = text.replace(')', ' ') + s + ")";
                }
            }
        }
        return text;
    }

    /**
     * Sets the voicing text field based on what notes have been pressed
     */
    public void setVoicingEntryTFfromKeys() {
        notate.clearVoicingEntryTF();

        for (PianoKey i : pianoKeys()) {
            if (i.isPressed() && i.isExtension()) {
                String s = i.getName();
                notate.addExtEntryTFText(s);
            } else if (i.isPressed() && !i.isExtension()) {
                String s = i.getName();
                notate.addVoicingEntryTFText(s);
            }
        }
    }

    String currentChordName;

    /**
     * Displays the indicated voicing, represented as an S expression,
     * on the keyboard. This is only called from Notate.
     * @param chordName
     * @param v
     */
    public void showVoicingOnKeyboard(String chordName, String v, boolean shift) {
        if (shift) {
            shiftLeft();
        }
        clearKeyboard();

        String e = notate.extEntryTFText();
        if (debug) System.out.println("showVoicingOnKeyboard " + chordName + " " + v);
        currentChordName = chordName;
        displayPane[displayPane.length - 1].setChordName(currentChordName);
        presentChordDisplay.setText(currentChordName);
        Polylist voicing = notate.voicingToList(v);
        Polylist extension = notate.extensionToList(e);

        voicing = voicing.append(extension);

        while (voicing.nonEmpty()) {
            NoteSymbol n = (NoteSymbol) voicing.first();
            int midiValue = n.getMIDI();
            PianoKey key = pianoKeys()[midiValue - A];
            key.setPressed(true);
            pressKey(key);
            voicing = voicing.rest();
        }
        voicingPrintDistanceMetrics();
    }

    /**
     * determines whether the keyboard is in playback mode
     * @return true if the keyboard is playing, false otherwise
     */
    public boolean isPlaying() {
        return playback;
    }

    /**
     * turns playback mode on or off
     * @param on
     */
    public void setPlayback(boolean on) {
        playback = on;
    }


    /**
     * Sets the text in the present chord display label.
     *
     * @param text
     */
    public void setPresentChordDisplayText(String text) {
        presentChordDisplay.setText(text);
    }

    /**
     * Gets the text displayed in the present chord display
     *
     * @return a String - the chords displayed above the keyboard.
     */
    public String getPresentChordDisplayText() {
        return presentChordDisplay.getText();
    }

    /**
     * Sets single note mode to be on or off.
     *
     * @param on
     */
    public void setSingleNoteMode(boolean on) {
        this.singleNoteMode = on;
    }

    private void singleNoteModeMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_singleNoteModeMIActionPerformed

        setSingleNoteMode(true);
        String voicing = notate.voicingEntryTFText();
        currentVoicing = stringToMIDI(voicing);

    }//GEN-LAST:event_singleNoteModeMIActionPerformed

    private void chordModeMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chordModeMIActionPerformed

        setSingleNoteMode(false);

    }//GEN-LAST:event_chordModeMIActionPerformed

    private void clearKeyboardMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearKeyboardMIActionPerformed

        clearKeyboard();
        notate.clearVoicingEntryTF();
        for (int i = 0; i < numberOfDisplayedPanes; i++) {
            displayPane[i].clear();
        }
    }//GEN-LAST:event_clearKeyboardMIActionPerformed

    private void addToSequenceMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToSequenceMIActionPerformed

        String v = notate.voicingEntryTFText();
        if (v.equals(EMPTY)) {
            return;
        }
        notate.addToVoicingSequence();

    }//GEN-LAST:event_addToSequenceMIActionPerformed

    private void playChordMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playChordMIActionPerformed

        String s = notate.voicingEntryTFText();
        String c = notate.getChordRootTFText();

        notate.constructAndPlayChord(c, s);

    }//GEN-LAST:event_playChordMIActionPerformed

    private void startPlayMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startPlayMIActionPerformed
        startPlayback();
    }//GEN-LAST:event_startPlayMIActionPerformed

    private void stopPlayMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopPlayMIActionPerformed
        stopPlayback();
    }//GEN-LAST:event_stopPlayMIActionPerformed

    private void startPlayback() {
        playback = true;
        notate.playScore();
    }

    private void pausePlayback() {
        if (playback) {
            notate.pauseToKeyboard();
        }
    }

    private void stopPlayback() {
        playback = false;
        notate.stopPlaying();
        clearKeyboard();
        notate.clearVoicingEntryTF();
        resetChordDisplay();
    }

    private void startSelPlayMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startSelPlayMIActionPerformed

        playback = true;
        notate.getCurrentStave().playSelection(false, 0, PlayScoreCommand.USEDRUMS, "VoicingKeyboard");

    }//GEN-LAST:event_startSelPlayMIActionPerformed

    private void stopSelPlayMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopSelPlayMIActionPerformed

        playback = false;
        notate.getCurrentStave().playSelection(true, 0, PlayScoreCommand.USEDRUMS, "VoicingKeyboard");

    }//GEN-LAST:event_stopSelPlayMIActionPerformed

    private void resetChordDisplayMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetChordDisplayMIActionPerformed

        resetChordDisplay();

    }//GEN-LAST:event_resetChordDisplayMIActionPerformed

    private void pausePlayMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pausePlayMIActionPerformed
        pausePlayback();
    }//GEN-LAST:event_pausePlayMIActionPerformed

    private void closeWindowMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeWindowMIActionPerformed
        closeWindow();
    }//GEN-LAST:event_closeWindowMIActionPerformed

    private void cascadeMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cascadeMIActionPerformed
        WindowRegistry.cascadeWindows(this);
    }//GEN-LAST:event_cascadeMIActionPerformed

    private void windowMenuMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_windowMenuMenuSelected

        windowMenu.removeAll();

        windowMenu.add(closeWindowMI);

        windowMenu.add(cascadeMI);

        windowMenu.add(windowMenuSeparator);

        for (WindowMenuItem w : WindowRegistry.getWindows()) {
            windowMenu.add(w.getMI(this));      // these are static, and calling getMI updates the name on them too in case the window title changed
        }

        windowMenu.repaint();
    }//GEN-LAST:event_windowMenuMenuSelected

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        closeWindow();
    }//GEN-LAST:event_formWindowClosing

    private void chordStepBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chordStepBackButtonActionPerformed
        shiftRight(); // FIX: Does not work as desired, so out for now.
        notate.chordStepBackDo();
        currentChordName = getPresentChordDisplayText();
        showPanes();
    }//GEN-LAST:event_chordStepBackButtonActionPerformed

    private void chordReplayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chordReplayButtonActionPerformed
        notate.chordReplayDo();
    }//GEN-LAST:event_chordReplayButtonActionPerformed

    private void chordStepForwardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chordStepForwardButtonActionPerformed
        notate.chordStepForwardDo();
        displayPane[displayPane.length - 1].setChordName(currentChordName);
        showPanes();
        if (debug) System.out.println("currentChordName = " + currentChordName);
    }//GEN-LAST:event_chordStepForwardButtonActionPerformed

    private void playChordButtonKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_playChordButtonKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_playChordButtonKeyTyped

    private void playChordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playChordButtonActionPerformed

        String s = notate.voicingEntryTFText();
        String c = notate.getChordRootTFText();

        notate.constructAndPlayChord(c, s);
    }//GEN-LAST:event_playChordButtonActionPerformed

    private void saveVoicingBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveVoicingBtnActionPerformed
        saveChord();
    }//GEN-LAST:event_saveVoicingBtnActionPerformed

    /**
     * if turned off, the labels will set invisible and turnOnOffLabels is changed to false
     * otherwise, goes through pianoKeys() and determines which ones are on and turns on their labels
     * @param evt
     */
    private void turnOnOffKeyLabelsMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_turnOnOffKeyLabelsMIActionPerformed
        if (!turnOnOffKeyLabelsMI.isSelected()) {
            setInvisible();
            turnOnOffKeyLabelsMI.setText("Click To Turn On Key Labels");
            turnOnOffLabels = false;
        } else {
            turnOnOffKeyLabelsMI.setText("Click To Turn Off Key Labels");
            for (int x = 0; x < pianoKeys().length; x++) {
                if (pianoKeys()[x].isPressed()) {
                    labels[x].setForeground(Color.black);
                }
                if (pianoKeys()[x].isBass()) {
                    labels[x].setForeground(Color.black);
                }
            }
            turnOnOffLabels = true;
        }
    }//GEN-LAST:event_turnOnOffKeyLabelsMIActionPerformed

    private void playBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playBtnActionPerformed
        startPlayback();
    }//GEN-LAST:event_playBtnActionPerformed

    private void stopBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopBtnActionPerformed
        stopPlayback();
    }//GEN-LAST:event_stopBtnActionPerformed

    private void pauseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseBtnActionPerformed
        pausePlayback();
    }//GEN-LAST:event_pauseBtnActionPerformed

    /**
     * For Voicing Data/info
     */
    private static int[] lastChord = null;

    public void voicingPrintDistanceMetrics() {
        String v = notate.voicingEntryTFText();
        String chordName = this.getPresentChordDisplayText();
        Polylist chordList = notate.voicingToList(v);
        Object chordNotes[] = chordList.array();
        int[] chordMidi = new int[chordNotes.length];
        for (int i = 0; i < chordNotes.length; i++) {
            NoteSymbol ns = (NoteSymbol) chordNotes[i];
            chordMidi[i] = ns.getMIDI();
            //ns=ns.transpose(distance);
            //chordString+=ns.toPitchString()+"8 ";
        }
        if (lastChord != null)
            VoicingDebug.println("Keyboard Voicing Analytics:,,,,NumNotesOld," + lastChord.length + ",NumNotesNew," + chordMidi.length + " ,Distance," + VoicingDistanceCalculator.calculateDistance(lastChord, chordMidi) + ", NotesChanged," + VoicingDistanceCalculator.calculateNotesChanged(lastChord, chordMidi));
        lastChord = chordMidi;
    }

    public JLabel[] staffDisplay;
    public int curChordIndex = numberOfDisplayedPanes - 1;    //index number of last panel
    public int indexInArray = numberOfDisplayedPanes - 1;                       //the index in the array of the chord displayed in the curChordIndex box

    public int numStaffs = 6;           //
    /* Various constants for sizes on the staffs */
    static int staffGap = 11;           // Pixel gap between staff lines
    static int trebleBase = 110;        // Top line of the treble clef
    static int bassBase = 253;          // Top line on the bass clef
    static int staffWidth = 30;         // Width of ledger lines

    /* Various note constants */
    static int lowBLine = 2 * 7 + 4;        // Note value of lowest line on bass
    static int highBLine = 3 * 7 + 5;       // Note value of highest line on bass
    static int lowTLine = 4 * 7 + 2;        // Note value of lowest line on treble
    static int highTLine = 5 * 7 + 3;       // Note value of highest line on treble
    static int highestLine = 7;         // Highest Space -- C8 

    static int visichordBelowKeyboard = 350;

    public void setVisichordDialog() {
        // Position chord display below keyboard
        visichordDialog.setLocation(getX(), getY() + visichordBelowKeyboard);
        visichordDialog.setVisible(true);
        visichordDialog.setAlwaysOnTop(true);
    }

    static final int MIDDLE_C_OFFSET_TREBLE = 161;     //distance midi for middleC on treble
    static final int MIDDLE_C_OFFSET_BASS = 237;       //distance midi for middleC on bass
    static final int MIDDLE_C_MIDI_VALUE = 60;         //midi value for middle C
    static final int NOTE_ICON_WIDTH = 20;             //width of note icon
    static final int NOTE_ICON_HEIGHT = 10;            //height of note icon
    static final int FLAT_ICON_WIDTH = 12;             //width of flatLabel icon
    static final int FLAT_ICON_HEIGHT = 37;            //height of flatLabel icon
    static final int SHARP_ICON_WIDTH = 12;            //width of sharpLabel icon
    static final int SHARP_ICON_HEIGHT = 29;           //height of sharpLabel icon
    static final int OCTAVE_DISPLACEMENT = 39;         //distance between two Cs
    static final int LEDGER_LINES_ABOVE_TREBLE = 6;    //number of ledger lines above the treble clef
    static final int LEDGER_LINES_BELOW_TREBLE = 1;    //number of ledger lines below the treble clef
    static final int LEDGER_LINES_ABOVE_BASS = 1;      //number of ledger lines above the bass clef
    static final int LEDGER_LINES_BELOW_BASS = 9;      //number of ledger lines below the bass clef

    ChordPane[] displayPane;
    ArrayList<ChordPane> savedPanes;

    // CAUTION: These offset are only good for the accidental assignments shown
// and for treble clef.
    /* C, C#, D, Eb, E,  F, F#,  G, G#,  A, Bb,  B */
    static final int NOTE_OFFSET_WITHIN_OCTAVE[] = {0, 0, 6, 11, 11, 17, 17, 22, 22, 28, 33, 33};
    public static final int OFFSETX[] = {60, 81, 101};  // list of 3 columns where the note can lie
    static final int NOTE_OCTAVE_STEP = 4;

    public void drawNote(int midi, int panelNumber) {
        int offsetX = displayPane[panelNumber].getWidth() / 2 - (wholeNoteIcon.getIconWidth() / 2);

        int offsetY = MIDDLE_C_OFFSET_TREBLE;
        int accidentalX = offsetX - flatIcon.getIconWidth() + 2;
        int octave = midi / 12;
        int distAway = 5 - octave;
        int index = (Math.abs((midi - MIDDLE_C_MIDI_VALUE)) % 12);
        if (distAway > 0) //move down bass
        {
            int offsetWithinOctave = 0;
            if (index == 0) //C -- this extra if is for index out of bounds error
            {
                offsetWithinOctave = NOTE_OFFSET_WITHIN_OCTAVE[0];
            } else {
                offsetWithinOctave = NOTE_OFFSET_WITHIN_OCTAVE[12 - index];
                index = 12 - index;
            }

            offsetY = MIDDLE_C_OFFSET_BASS + distAway * OCTAVE_DISPLACEMENT - offsetWithinOctave;
        } else //move up treble
        {
            int offsetWithinOctave = NOTE_OFFSET_WITHIN_OCTAVE[(midi - MIDDLE_C_MIDI_VALUE) % 12];
            offsetY = MIDDLE_C_OFFSET_TREBLE - Math.abs(distAway) * OCTAVE_DISPLACEMENT - offsetWithinOctave;
        }
        String accidental = isAccidental(index);
        JLabel sharpLabel = new JLabel(sharpIcon);
        JLabel flatLabel = new JLabel(flatIcon);

        int accidentalY = offsetY;
        if (accidental.equals("flat")) {
            displayPane[panelNumber].addAccidental(midi, flatLabel);
            accidentalY = accidentalY - flatIcon.getIconWidth();
            flatLabel.setBounds(accidentalX, accidentalY, FLAT_ICON_WIDTH, FLAT_ICON_HEIGHT);
        } else if (accidental.equals("sharp")) {
            displayPane[panelNumber].addAccidental(midi, sharpLabel);
            accidentalY = accidentalY - sharpIcon.getIconWidth();
            sharpLabel.setBounds(accidentalX, accidentalY, SHARP_ICON_WIDTH, SHARP_ICON_HEIGHT);
        }
        if (displayPane[panelNumber].hasBorderY(midi, offsetY)) //move over if next to another note
        {

            if (displayPane[panelNumber].isAccidental(midi)) // if accidental, go to right
            {
                offsetX = OFFSETX[0];
                //offsetX - wholeNoteIcon.getIconWidth() - 5;
                if (accidental.equals("flat")) {
                    accidentalX = OFFSETX[0] - FLAT_ICON_WIDTH;
                    //accidentalX - wholeNoteIcon.getIconWidth() - 5;
                    flatLabel.setBounds(accidentalX, accidentalY, FLAT_ICON_WIDTH, FLAT_ICON_HEIGHT);
                } else {
                    accidentalX = OFFSETX[0] - SHARP_ICON_WIDTH;
                    //accidentalX = accidentalX - wholeNoteIcon.getIconWidth() - 5 ;
                    sharpLabel.setBounds(accidentalX, accidentalY, SHARP_ICON_WIDTH, SHARP_ICON_HEIGHT);
                }
            } else //if normal note, go to left
            {
                offsetX = OFFSETX[2];
                //offsetX + wholeNoteIcon.getIconWidth() + flatIcon.getIconWidth();
            }
        }

        JLabel wholeNote = new JLabel(wholeNoteIcon);
        showLine(panelNumber, offsetY);

        displayPane[panelNumber].addNote(midi, wholeNote); // Note is added here

        wholeNote.setBounds(offsetX, offsetY, NOTE_ICON_WIDTH, NOTE_ICON_HEIGHT);
    }

    public void shiftLeft() {
        if (debug) System.out.println("\nshiftLeft");

        ChordPane p = new ChordPane("X");
        p.copyFrom(displayPane[0]);
        savedPanes.add(p);

        if (debug) System.out.println("copy display pane 0 to savedPanes");

        for (int i = 1; i < displayPane.length; i++) {
            if (debug) System.out.println("copy display pane " + i + " to pane " + (i - 1));
            displayPane[i - 1].copyFrom(displayPane[i]);
            displayPane[i].clear();
        }
        displayPane[displayPane.length - 1].clear();
    }


    public void shiftRight() {
        if (debug) System.out.println("\nshiftRight");

        for (int i = displayPane.length - 1; i > 0; i--) {
            displayPane[i].clear();
            displayPane[i].copyFrom(displayPane[i - 1]);
            if (debug) System.out.println("copy display pane " + (i - 1) + " to " + i);
        }

        int savedPaneTopIndex = savedPanes.size() - 1;
        if (savedPaneTopIndex >= 0) {
            displayPane[0].copyFrom(savedPanes.get(savedPaneTopIndex));
            savedPanes.remove(savedPaneTopIndex);
            if (debug) System.out.println("copy savedPane top to pane 0");
        }
    }


    private void showPanes() {
        int index = 0;
        for (ChordPane p : savedPanes) {
            if (debug) System.out.println("savedPane   " + index + ": " + p);
            index++;
        }

        index = 0;
        for (ChordPane p : displayPane) {
            if (debug) System.out.println("displayPane " + index + ": " + p);
            index++;
        }
    }

    public void removeNote(int MIDIvalue, int panelNumber) {
        displayPane[panelNumber].removeNote(MIDIvalue);
    }

    /* C, C#, D, Eb, E,  F, F#,  G, G#,  A, Bb,  B */
    public String isAccidental(int index) {
        switch (index) {
            case 1:
            case 6:
            case 8:
                return "sharp";
            case 3:
            case 10:
                return "flat";
            default:
                return "natural";
        }
    }

    /**
     * Draws the specified number of ledger lines below the bass clef,
     * above the bass clef, below and above the treble clef for the specified
     * chord. Start invisible  
     * @param belowBass
     * @param aboveBass
     * @param belowTreble
     * @param aboveTreble
     * @param chordNum
     */
    public void drawStaffLines(int belowBass,
                               int aboveBass,
                               int belowTreble,
                               int aboveTreble,
                               int chordNum) {
        /* Set the base midi and y positions, starting with the lines above
         * the treble clef */
        int xPos = staffIcon.getIconWidth() / 2 - staffWidth / 2;
        int yPos = trebleBase;

        /* Draw the specified number of lines above the treble clef, changing
         * the y position by the space between the lines */
        for (int i = 0; i < aboveTreble; i++) {
            yPos -= staffGap;
            drawStaffLine(xPos, yPos, chordNum, i);
        }

        /* Set the initial y position to the bottom of the treble clef,
         * then draw the specified number of lines there */
        yPos = trebleBase + 4 * staffGap;
        for (int i = 0; i < belowTreble; i++) {
            yPos += staffGap;
            drawStaffLine(xPos, yPos, chordNum, i + aboveTreble);
        }

        /* Draw the lines above the bass clef */
        yPos = bassBase;
        for (int i = 0; i < aboveBass; i++) {
            yPos -= staffGap;
            drawStaffLine(xPos, yPos, chordNum, i + aboveTreble + belowTreble);
        }

        /* Draw the lines below the bass clef */
        yPos = bassBase + 4 * staffGap;
        for (int i = 0; i < belowBass; i++) {
            yPos += staffGap;
            drawStaffLine(xPos, yPos, chordNum, i + aboveTreble + belowTreble + aboveBass);
        }
    }

    /**
     * Draw a ledger line at the specified midi, y position for the given chord.
     */

    public void drawStaffLine(int xPos, int yPos, int panelNum, int index) {
        JSeparator line = new JSeparator();
        line.setBackground(new Color(240, 240, 240));
        line.setForeground(new Color(240, 240, 240));
        line.setBounds(xPos, yPos, staffWidth, 1);
        displayPane[panelNum].add(line);
        displayPane[panelNum].setLedgerLine(line, index);
    }

    public void showLine(int panelNum, int yOffset) {
        int[] array;
        int xPos = displayPane[panelNum].getWidth() / 2 - staffWidth / 2;
        if (yOffset < trebleBase) //above treble
        {
            array = new int[LEDGER_LINES_ABOVE_TREBLE];
            for (int i = 0; i < array.length; i++) {
                array[i] = trebleBase - i * staffGap;
            }
//            for(int i = 0; i < array.length; i++)
//            {
//                if(array [i] - yOffset < 6)
//                {
//                    displayPane[panelNum].drawLedgerLine(xPos, array[i]);
//                }
//            }
            for (int i = 0; i < array.length; i++) {
                //System.out.println("numbers: " + array[i]); 
                displayPane[panelNum].drawLedgerLine(xPos, array[i]);
            }
            //ok so we know the yOffset for the note, and we know the spacing for all the 
            //ledger lines so we can use this and calculate where to draw the line 

            //ok each gap is 11 apart   treblebase + 11 * num 
            //how to calculate num? 

//            for(int i = 0; i< displayPane[panelNum].getNotes().length; i++)
//            {
//                int ledgerIndex =0; 
//                if(displayPane[panelNum].getNotes()[i] != null)
//                {
//                    int xPos = displayPane[panelNum].getNotes()[i].getX(); 
//                    //int yPos = displayPane[panelNum].getNotes()[i].getY(); 
//                    int ledgerX = displayPane[panelNum].getLedgerLine(ledgerIndex).getX(); 
//                    if(Math.abs(ledgerX - xPos) <=6 )
//                    {
//                        displayPane[panelNum].getLedgerLine(ledgerIndex).setForeground(Color.black); 
//                    } 
//                }
//            }
        }
//        if(yOffset > MIDDLE_C) //below treble
//        {
//            //staffPanels[panelNum].setLedgerLine(line, index);
//            //staffPanels[panelNum].getLedgerLine(9).setForeground(Color.black);
//        }
//        if(60 > MIDIvalue && MIDIvalue > 58)  //aboveBass
//        { 
//            //staffPanels[panelNum].getLedgerLine(10).setForeground(Color.black);
//        }
        if (yOffset > bassBase + 4 * staffGap)  //below bass
        {
            array = new int[LEDGER_LINES_BELOW_BASS];
            for (int i = 0; i < array.length; i++) {
                array[i] = bassBase + (4 + i) * staffGap;
            }
        }
        visichordDialog.repaint();
    }


    /**
     * saves current voicing in the Advisor which makes its way to My.voc eventually
     */
    private void saveChord() {
        String v = notate.voicingEntryTFText();
        String root = notate.getChordRootTFText();
        //notate.voicingToList(v)
        String chordName = this.getPresentChordDisplayText();
        Polylist chordList = notate.voicingToList(v);
        Object chordNotes[] = chordList.array();
        NoteSymbol cNote = NoteSymbol.makeNoteSymbol("c");
        NoteSymbol rootNote = NoteSymbol.makeNoteSymbol(root);
        int distance = rootNote.getSemitones() - cNote.getSemitones();
        String chordString = "(";
        for (Object o : chordNotes) {
            NoteSymbol ns = (NoteSymbol) o;
            ns = ns.transpose(-distance);
            chordString += ns.toPitchString() + " ";
        }
        if (chordString.length() > 1)
            chordString = chordString.substring(0, chordString.length() - 1);
        chordString += ")";
//        String userDescription=null;

        notate.showNewVoicingDialog(chordName);

//        while(userDescription==null || userDescription.equals(""))
//                userDescription = JOptionPane.showInputDialog("Please name this voicing (e.g. left-hand-A)");
//        userDescription=userDescription.replaceAll(" ", "-");

//      Advisor adv = ImproVisor.getAdvisor();
//        
//        adv.addVoicing(chordName, userDescription,"designer",notate.voicingToList(chordString), Polylist.nil);
//        //System.out.println(v+" new " +chordString);
//        ImproVisor.getCurrentWindow().saveAdvice();
    }

    /**
     * clears the chord display labels
     */
    public void resetChordDisplay() {
        presentChordDisplay.setText(EMPTY);
    }

    /**
     * Transforms a String of form key name (ex. c#++) into a String including
     * only the note name itself (ex. C#)
     *
     * @param name, a String, the name of a key
     * @return a String that is the name of just a note
     */
    public String nameToBass(String name) {
        String mod = EMPTY;

        if (name.length() > 1) {
            String c = name.substring(1, 2);
            if (c.equals(SHARP) || c.equals(FLAT)) {
                mod = c;
            }
        }
        name = name.substring(0, 1);
        name = name.toUpperCase();
        name = name + mod;

        return name;
    }

    /**
     * For use if the user neglects to indicate a high range for the bass. Sets
     * the range at one octave above the specified low range.
     *
     * @param lowRange
     * @return
     */
    public int setBassHighRange(int lowRange) {
        int highRange; // was = C_EIGHTH + 1;
        highRange = lowRange + 11;
        PianoKey high = pianoKeys()[highRange - A];
        String name = high.getName();
        NoteSymbol c = NoteSymbol.makeNoteSymbol(name);
        highRange = c.getMIDI();
        notate.setBassHighRangeTF(name);
        return highRange;
    }

    /**
     * Takes a MIDI value and finds the bass name - ex. c#-- becomes C#
     *
     * @param midiValue
     * @return
     */
    public String findBassName(int midiValue) {
        PianoKey bass = pianoKeys()[midiValue - A];
        for (PianoKey pk : pianoKeys()) {
            if (pk.isBass()) {
                pk.setIsBass(false);
                pressKey(pk);
            }
        }
        bass.setIsBass(true);

        String name = bass.getName();
        name = nameToBass(name);
        return name;
    }

    /**
     * Sets the chord root key to a given MIDI value.
     *
     * @param bassNote
     * @param midiValue
     */
    public void setBass(String bassNote, int midiValue) {
        PianoKey bass = pianoKeys()[midiValue - A];

        notate.setBassNoteTFText(bassNote);

        if (notate.rootEqualBassCheckboxChecked()) {
            notate.setChordRootTFText(bassNote);
        }

        pressKey(bass);
    }

    public boolean enharmonic(String s1, String s2) {
        boolean areEnharmonic = false;
        if (s1.equals("Db") && s2.equals("C#") ||
                s1.equals("C#") && s2.equals("Db")) {
            areEnharmonic = true;
        } else if (s1.equals("D#") && s2.equals("Eb") ||
                s1.equals("Eb") && s2.equals("D#")) {
            areEnharmonic = true;
        } else if (s1.equals("Gb") && s2.equals("F#") ||
                s1.equals("F#") && s2.equals("Gb")) {
            areEnharmonic = true;
        } else if (s1.equals("Ab") && s2.equals("G#") ||
                s1.equals("G#") && s2.equals("Ab")) {
            areEnharmonic = true;
        } else if (s1.equals("Bb") && s2.equals("A#") ||
                s1.equals("A#") && s2.equals("Bb")) {
            areEnharmonic = true;
        }

        return areEnharmonic;
    }

    public String enharmonicNote(String note) {
        switch (note) {
            case "Db":
                note = "C#";
                break;
            case "C#":
                note = "Db";
                break;
            case "D#":
                note = "Eb";
                break;
            case "Eb":
                note = "D#";
                break;
            case "F#":
                note = "Gb";
                break;
            case "Gb":
                note = "F#";
                break;
            case "G#":
                note = "Ab";
                break;
            case "Ab":
                note = "G#";
                break;
            case "A#":
                note = "Bb";
                break;
            case "Bb":
                note = "A#";
                break;
            default:
                break;
        }

        return note;

    }

    /**
     * Finds the chord root key based on the chord root text field.
     *
     * @return the integer value of the chord root key.
     */
    public int findBass() {
        String bass = notate.getBassNoteTFText();

        bass = bass.toLowerCase();

        String first = bass.charAt(0) + EMPTY;
        first = first.toUpperCase();
        if (bass.length() > 1) {
            char mod = bass.charAt(1);
            bass = first + mod;
        } else {
            bass = first;
        }

        int midiValue = C_EIGHTH + 1;
        int lowRange = notate.getLowerBound();
        int highRange;

        if (notate.bassHighRangeTFText().equals(EMPTY)) {
            highRange = setBassHighRange(lowRange);
        } else {
            highRange = notate.getUpperBound();
        }

        for (PianoKey pk : pianoKeys()) {
            String name = pk.getName();

            name = nameToBass(name);

            int midi = pk.getMIDI();

            if (name.equals(bass) || enharmonic(name, bass)) {
                if (midi >= lowRange && midi <= highRange && midi < midiValue) {
                    midiValue = midi;
                }
            }
        }
        return midiValue;
    }

    /**
     * Displays the chord root key as blue.
     */
    public void showBass() {
        int midiValue = findBass();
        String name = findBassName(midiValue);
        setBass(name, midiValue);
    }

    /**
     * Used if One Note Mode is selected.
     *
     * @param keyPlayed
     */
    public void pressSingleKey(PianoKey keyPlayed) {
        for (int i = A; i <= C_EIGHTH; i++) {
            PianoKey key = pianoKeys()[i - A];
            if (!currentVoicing[i] && key.isPressed()) {
                key.setPressed(false);
                pressKey(key);
            }
            if ((key.isPressed() || key.isBass()) && turnOnOffLabels) {
                labels[key.getMIDI() - 21].setForeground(Color.black);
            } else {
                labels[key.getMIDI() - 21].setForeground(new Color(240, 240, 240));
            }
        }
        notate.clearVoicingEntryTF();
        keyPlayed.setPressed(true);
        pressKey(keyPlayed);
    }

    /**
     * pressKey changes the images of the keys based on whether they have been
     * pressed or not.
     *
     * @param keyPlayed
     */
    public void pressKey(PianoKey keyPlayed) {
        //System.out.println("pressKey " + keyPlayed.getName());
        JLabel label = keyPlayed.getLabel();
        int midi = keyPlayed.getMIDI();
        Icon onIcon = keyPlayed.getOnIcon();
        Icon offIcon = keyPlayed.getOffIcon();
        Icon rootIcon = keyPlayed.getBassIcon();
        Icon rootIconOn = keyPlayed.getBassOnIcon();

        if (keyPlayed.isPressed()) {
            if (keyPlayed.isBass()) {
                label.setIcon(rootIconOn);
                if (turnOnOffLabels) {
                    labels[midi - 21].setForeground(Color.black);
                }
                drawNote(midi, curChordIndex);
            } else {
                label.setIcon(onIcon);
                if (turnOnOffLabels) {
                    labels[midi - 21].setForeground(Color.black);
                }
                drawNote(midi, curChordIndex);
            }
        } else if (!keyPlayed.isPressed()) {
            if (keyPlayed.isBass()) {
                label.setIcon(rootIcon);
                if (turnOnOffLabels) {
                    labels[midi - 21].setForeground(Color.black);
                }
                drawNote(midi, curChordIndex);
            } else {
                label.setIcon(offIcon);
                labels[midi - 21].setForeground(new Color(240, 240, 240));
                removeNote(midi, curChordIndex);
            }
        }
        visichordDialog.repaint();
        forcePaint();
    }

    /**
     * Force painting the window, without waiting for repaint to do it,
     * as repaints may be queued when the calling application sleeps.
     */

    private void forcePaint() {
        paint(getGraphics());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel A0;
    private javax.swing.JLabel A1;
    private javax.swing.JLabel A2;
    private javax.swing.JLabel A3;
    private javax.swing.JLabel A4;
    private javax.swing.JLabel A5;
    private javax.swing.JLabel A6;
    private javax.swing.JLabel A7;
    private javax.swing.JLabel B0;
    private javax.swing.JLabel B1;
    private javax.swing.JLabel B2;
    private javax.swing.JLabel B3;
    private javax.swing.JLabel B4;
    private javax.swing.JLabel B5;
    private javax.swing.JLabel B6;
    private javax.swing.JLabel B7;
    private javax.swing.JLabel Bb0;
    private javax.swing.JLabel Bb1;
    private javax.swing.JLabel Bb2;
    private javax.swing.JLabel Bb3;
    private javax.swing.JLabel Bb4;
    private javax.swing.JLabel Bb5;
    private javax.swing.JLabel Bb6;
    private javax.swing.JLabel Bb7;
    private javax.swing.JLabel C1;
    private javax.swing.JLabel C2;
    private javax.swing.JLabel C3;
    private javax.swing.JLabel C4;
    private javax.swing.JLabel C5;
    private javax.swing.JLabel C6;
    private javax.swing.JLabel C7;
    private javax.swing.JLabel C8;
    private javax.swing.JLabel Csharp1;
    private javax.swing.JLabel Csharp2;
    private javax.swing.JLabel Csharp3;
    private javax.swing.JLabel Csharp4;
    private javax.swing.JLabel Csharp5;
    private javax.swing.JLabel Csharp6;
    private javax.swing.JLabel Csharp7;
    private javax.swing.JLabel D1;
    private javax.swing.JLabel D2;
    private javax.swing.JLabel D3;
    private javax.swing.JLabel D4;
    private javax.swing.JLabel D5;
    private javax.swing.JLabel D6;
    private javax.swing.JLabel D7;
    private javax.swing.JLabel E1;
    private javax.swing.JLabel E2;
    private javax.swing.JLabel E3;
    private javax.swing.JLabel E4;
    private javax.swing.JLabel E5;
    private javax.swing.JLabel E6;
    private javax.swing.JLabel E7;
    private javax.swing.JLabel Eb1;
    private javax.swing.JLabel Eb2;
    private javax.swing.JLabel Eb3;
    private javax.swing.JLabel Eb4;
    private javax.swing.JLabel Eb5;
    private javax.swing.JLabel Eb6;
    private javax.swing.JLabel Eb7;
    private javax.swing.JLabel F1;
    private javax.swing.JLabel F2;
    private javax.swing.JLabel F3;
    private javax.swing.JLabel F4;
    private javax.swing.JLabel F5;
    private javax.swing.JLabel F6;
    private javax.swing.JLabel F7;
    private javax.swing.JLabel Fsharp1;
    private javax.swing.JLabel Fsharp2;
    private javax.swing.JLabel Fsharp3;
    private javax.swing.JLabel Fsharp4;
    private javax.swing.JLabel Fsharp5;
    private javax.swing.JLabel Fsharp6;
    private javax.swing.JLabel Fsharp7;
    private javax.swing.JLabel G1;
    private javax.swing.JLabel G2;
    private javax.swing.JLabel G3;
    private javax.swing.JLabel G4;
    private javax.swing.JLabel G5;
    private javax.swing.JLabel G6;
    private javax.swing.JLabel G7;
    private javax.swing.JLabel Gsharp1;
    private javax.swing.JLabel Gsharp2;
    private javax.swing.JLabel Gsharp3;
    private javax.swing.JLabel Gsharp4;
    private javax.swing.JLabel Gsharp5;
    private javax.swing.JLabel Gsharp6;
    private javax.swing.JLabel Gsharp7;
    private javax.swing.JMenuItem addToSequenceMI;
    private javax.swing.JPanel blackKeyLabels;
    private javax.swing.JMenuItem cascadeMI;
    private javax.swing.JMenuItem chordModeMI;
    private javax.swing.JButton chordReplayButton;
    private javax.swing.JLabel chordRootNoteLabel;
    private javax.swing.JButton chordStepBackButton;
    private javax.swing.JButton chordStepForwardButton;
    private javax.swing.JMenuItem clearKeyboardMI;
    private javax.swing.JLabel clefLabel;
    private javax.swing.JMenuItem closeWindowMI;
    private javax.swing.JLabel ctrlClicktoChangeRootLabel;
    private javax.swing.JLabel ctrlShiftClickExtLabel;
    private javax.swing.JMenuItem downHalfStepMI;
    private javax.swing.JMenuItem downOctaveMI;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel keyA0;
    private javax.swing.JLabel keyA1;
    private javax.swing.JLabel keyA2;
    private javax.swing.JLabel keyA3;
    private javax.swing.JLabel keyA4;
    private javax.swing.JLabel keyA5;
    private javax.swing.JLabel keyA6;
    private javax.swing.JLabel keyA7;
    private javax.swing.JLabel keyB0;
    private javax.swing.JLabel keyB1;
    private javax.swing.JLabel keyB2;
    private javax.swing.JLabel keyB3;
    private javax.swing.JLabel keyB4;
    private javax.swing.JLabel keyB5;
    private javax.swing.JLabel keyB6;
    private javax.swing.JLabel keyB7;
    private javax.swing.JLabel keyBb0;
    private javax.swing.JLabel keyBb1;
    private javax.swing.JLabel keyBb2;
    private javax.swing.JLabel keyBb3;
    private javax.swing.JLabel keyBb4;
    private javax.swing.JLabel keyBb5;
    private javax.swing.JLabel keyBb6;
    private javax.swing.JLabel keyBb7;
    private javax.swing.JLabel keyC1;
    private javax.swing.JLabel keyC2;
    private javax.swing.JLabel keyC3;
    private javax.swing.JLabel keyC4;
    private javax.swing.JLabel keyC5;
    private javax.swing.JLabel keyC6;
    private javax.swing.JLabel keyC7;
    private javax.swing.JLabel keyC8;
    private javax.swing.JLabel keyCsharp1;
    private javax.swing.JLabel keyCsharp2;
    private javax.swing.JLabel keyCsharp3;
    private javax.swing.JLabel keyCsharp4;
    private javax.swing.JLabel keyCsharp5;
    private javax.swing.JLabel keyCsharp6;
    private javax.swing.JLabel keyCsharp7;
    private javax.swing.JLabel keyD1;
    private javax.swing.JLabel keyD2;
    private javax.swing.JLabel keyD3;
    private javax.swing.JLabel keyD4;
    private javax.swing.JLabel keyD5;
    private javax.swing.JLabel keyD6;
    private javax.swing.JLabel keyD7;
    private javax.swing.JLabel keyE1;
    private javax.swing.JLabel keyE2;
    private javax.swing.JLabel keyE3;
    private javax.swing.JLabel keyE4;
    private javax.swing.JLabel keyE5;
    private javax.swing.JLabel keyE6;
    private javax.swing.JLabel keyE7;
    private javax.swing.JLabel keyEb1;
    private javax.swing.JLabel keyEb2;
    private javax.swing.JLabel keyEb3;
    private javax.swing.JLabel keyEb4;
    private javax.swing.JLabel keyEb5;
    private javax.swing.JLabel keyEb6;
    private javax.swing.JLabel keyEb7;
    private javax.swing.JLabel keyF1;
    private javax.swing.JLabel keyF2;
    private javax.swing.JLabel keyF3;
    private javax.swing.JLabel keyF4;
    private javax.swing.JLabel keyF5;
    private javax.swing.JLabel keyF6;
    private javax.swing.JLabel keyF7;
    private javax.swing.JLabel keyFsharp1;
    private javax.swing.JLabel keyFsharp2;
    private javax.swing.JLabel keyFsharp3;
    private javax.swing.JLabel keyFsharp4;
    private javax.swing.JLabel keyFsharp5;
    private javax.swing.JLabel keyFsharp6;
    private javax.swing.JLabel keyFsharp7;
    private javax.swing.JLabel keyG1;
    private javax.swing.JLabel keyG2;
    private javax.swing.JLabel keyG3;
    private javax.swing.JLabel keyG4;
    private javax.swing.JLabel keyG5;
    private javax.swing.JLabel keyG6;
    private javax.swing.JLabel keyG7;
    private javax.swing.JLabel keyGsharp1;
    private javax.swing.JLabel keyGsharp2;
    private javax.swing.JLabel keyGsharp3;
    private javax.swing.JLabel keyGsharp4;
    private javax.swing.JLabel keyGsharp5;
    private javax.swing.JLabel keyGsharp6;
    private javax.swing.JLabel keyGsharp7;
    private javax.swing.JPanel keyNamesPanel;
    private javax.swing.JLayeredPane keyboardLP;
    public javax.swing.JMenu optionsMenu;
    private javax.swing.JToggleButton pauseBtn;
    private javax.swing.JMenuItem pausePlayMI;
    private javax.swing.JButton playBtn;
    private javax.swing.JButton playChordButton;
    private javax.swing.JMenuItem playChordMI;
    private javax.swing.ButtonGroup playStopButtonGroup;
    private javax.swing.JMenu playbackMenu;
    private javax.swing.JLabel pointerC4;
    private javax.swing.JLabel presentChordDisplay;
    private javax.swing.JMenuItem resetChordDisplayMI;
    private javax.swing.JButton saveVoicingBtn;
    private javax.swing.JMenuItem singleNoteModeMI;
    private javax.swing.JMenuItem startPlayMI;
    private javax.swing.JMenuItem startSelPlayMI;
    private javax.swing.JButton stopBtn;
    private javax.swing.JMenuItem stopPlayMI;
    private javax.swing.JMenuItem stopSelPlayMI;
    private javax.swing.JCheckBoxMenuItem turnOnOffKeyLabelsMI;
    private javax.swing.JMenuItem upHalfStepMI;
    private javax.swing.JMenuItem upOctaveMI;
    private javax.swing.JDialog visichordDialog;
    private javax.swing.JMenu voicingModeMenu;
    private javax.swing.JPanel voicingStaffPanel;
    private javax.swing.JMenu voicingTransposeMenu;
    private javax.swing.JPanel whiteKeyLabels;
    private javax.swing.JMenu windowMenu;
    private javax.swing.JSeparator windowMenuSeparator;
    // End of variables declaration//GEN-END:variables

    /**
     * the array of PianoKeys for this Keyboard
     */

    public PianoKey[] pkeys;

    /**
     *  the array of PianoKeyLabels for this Keyboard
     */
    public JLabel[] labels;

    public JPanel notePane[];

    /**
     * Initialize all keys.
     */

    private void initKeys() {
        pkeys = new PianoKey[88];

        labels = new JLabel[88];

        notePane = new JPanel[numStaffs];

        // 0th octave keys
        pkeys[0] = new PianoKey(21, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyA0);
        pkeys[1] = new PianoKey(22, blackKeyPressed, blackKey, blackBassKey, blackBassKeyPressed, keyBb0);
        pkeys[2] = new PianoKey(23, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyB0);

        // 1st octave keys
        pkeys[3] = new PianoKey(24, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyC1);
        pkeys[4] = new PianoKey(25, blackKeyPressed, blackKey, blackBassKey, blackBassKeyPressed, keyCsharp1);
        pkeys[5] = new PianoKey(26, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyD1);
        pkeys[6] = new PianoKey(27, blackKeyPressed, blackKey, blackBassKey, blackBassKeyPressed, keyEb1);
        pkeys[7] = new PianoKey(28, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyE1);
        pkeys[8] = new PianoKey(29, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyF1);
        pkeys[9] = new PianoKey(30, blackKeyPressed, blackKey, blackBassKey, blackBassKeyPressed, keyFsharp1);
        pkeys[10] = new PianoKey(31, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyG1);
        pkeys[11] = new PianoKey(32, blackKeyPressed, blackKey, blackBassKey, blackBassKeyPressed, keyGsharp1);
        pkeys[12] = new PianoKey(33, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyA1);
        pkeys[13] = new PianoKey(34, blackKeyPressed, blackKey, blackBassKey, blackBassKeyPressed, keyBb1);
        pkeys[14] = new PianoKey(35, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyB1);

        // 2nd octave keys
        pkeys[15] = new PianoKey(36, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyC2);
        pkeys[16] = new PianoKey(37, blackKeyPressed, blackKey, blackBassKey, blackBassKeyPressed, keyCsharp2);
        pkeys[17] = new PianoKey(38, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyD2);
        pkeys[18] = new PianoKey(39, blackKeyPressed, blackKey, blackBassKey, blackBassKeyPressed, keyEb2);
        pkeys[19] = new PianoKey(40, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyE2);
        pkeys[20] = new PianoKey(41, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyF2);
        pkeys[21] = new PianoKey(42, blackKeyPressed, blackKey, blackBassKey, blackBassKeyPressed, keyFsharp2);
        pkeys[22] = new PianoKey(43, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyG2);
        pkeys[23] = new PianoKey(44, blackKeyPressed, blackKey, blackBassKey, blackBassKeyPressed, keyGsharp2);
        pkeys[24] = new PianoKey(45, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyA2);
        pkeys[25] = new PianoKey(46, blackKeyPressed, blackKey, blackBassKey, blackBassKeyPressed, keyBb2);
        pkeys[26] = new PianoKey(47, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyB2);

        // 3rd octave keys
        pkeys[27] = new PianoKey(48, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyC3);
        pkeys[28] = new PianoKey(49, blackKeyPressed, blackKey, blackBassKey, blackBassKeyPressed, keyCsharp3);
        pkeys[29] = new PianoKey(50, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyD3);
        pkeys[30] = new PianoKey(51, blackKeyPressed, blackKey, blackBassKey, blackBassKeyPressed, keyEb3);
        pkeys[31] = new PianoKey(52, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyE3);
        pkeys[32] = new PianoKey(53, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyF3);
        pkeys[33] = new PianoKey(54, blackKeyPressed, blackKey, blackBassKey, blackBassKeyPressed, keyFsharp3);
        pkeys[34] = new PianoKey(55, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyG3);
        pkeys[35] = new PianoKey(56, blackKeyPressed, blackKey, blackBassKey, blackBassKeyPressed, keyGsharp3);
        pkeys[36] = new PianoKey(57, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyA3);
        pkeys[37] = new PianoKey(58, blackKeyPressed, blackKey, blackBassKey, blackBassKeyPressed, keyBb3);
        pkeys[38] = new PianoKey(59, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyB3);

        // 4th octave keys
        pkeys[39] = new PianoKey(60, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyC4);
        pkeys[40] = new PianoKey(61, blackKeyPressed, blackKey, blackBassKey, blackBassKeyPressed, keyCsharp4);
        pkeys[41] = new PianoKey(62, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyD4);
        pkeys[42] = new PianoKey(63, blackKeyPressed, blackKey, blackBassKey, blackBassKeyPressed, keyEb4);
        pkeys[43] = new PianoKey(64, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyE4);
        pkeys[44] = new PianoKey(65, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyF4);
        pkeys[45] = new PianoKey(66, blackKeyPressed, blackKey, blackBassKey, blackBassKeyPressed, keyFsharp4);
        pkeys[46] = new PianoKey(67, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyG4);
        pkeys[47] = new PianoKey(68, blackKeyPressed, blackKey, blackBassKey, blackBassKeyPressed, keyGsharp4);
        pkeys[48] = new PianoKey(69, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyA4);
        pkeys[49] = new PianoKey(70, blackKeyPressed, blackKey, blackBassKey, blackBassKeyPressed, keyBb4);
        pkeys[50] = new PianoKey(71, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyB4);

        // 5th octave keys
        pkeys[51] = new PianoKey(72, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyC5);
        pkeys[52] = new PianoKey(73, blackKeyPressed, blackKey, blackBassKey, blackBassKeyPressed, keyCsharp5);
        pkeys[53] = new PianoKey(74, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyD5);
        pkeys[54] = new PianoKey(75, blackKeyPressed, blackKey, blackBassKey, blackBassKeyPressed, keyEb5);
        pkeys[55] = new PianoKey(76, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyE5);
        pkeys[56] = new PianoKey(77, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyF5);
        pkeys[57] = new PianoKey(78, blackKeyPressed, blackKey, blackBassKey, blackBassKeyPressed, keyFsharp5);
        pkeys[58] = new PianoKey(79, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyG5);
        pkeys[59] = new PianoKey(80, blackKeyPressed, blackKey, blackBassKey, blackBassKeyPressed, keyGsharp5);
        pkeys[60] = new PianoKey(81, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyA5);
        pkeys[61] = new PianoKey(82, blackKeyPressed, blackKey, blackBassKey, blackBassKeyPressed, keyBb5);
        pkeys[62] = new PianoKey(83, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyB5);

        // 6th octave keys
        pkeys[63] = new PianoKey(84, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyC6);
        pkeys[64] = new PianoKey(85, blackKeyPressed, blackKey, blackBassKey, blackBassKeyPressed, keyCsharp6);
        pkeys[65] = new PianoKey(86, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyD6);
        pkeys[66] = new PianoKey(87, blackKeyPressed, blackKey, blackBassKey, blackBassKeyPressed, keyEb6);
        pkeys[67] = new PianoKey(88, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyE6);
        pkeys[68] = new PianoKey(89, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyF6);
        pkeys[69] = new PianoKey(90, blackKeyPressed, blackKey, blackBassKey, blackBassKeyPressed, keyFsharp6);
        pkeys[70] = new PianoKey(91, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyG6);
        pkeys[71] = new PianoKey(92, blackKeyPressed, blackKey, blackBassKey, blackBassKeyPressed, keyGsharp6);
        pkeys[72] = new PianoKey(93, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyA6);
        pkeys[73] = new PianoKey(94, blackKeyPressed, blackKey, blackBassKey, blackBassKeyPressed, keyBb6);
        pkeys[74] = new PianoKey(95, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyB6);

        // 7th octave keys
        pkeys[75] = new PianoKey(96, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyC7);
        pkeys[76] = new PianoKey(97, blackKeyPressed, blackKey, blackBassKey, blackBassKeyPressed, keyCsharp7);
        pkeys[77] = new PianoKey(98, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyD7);
        pkeys[78] = new PianoKey(99, blackKeyPressed, blackKey, blackBassKey, blackBassKeyPressed, keyEb7);
        pkeys[79] = new PianoKey(100, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyE7);
        pkeys[80] = new PianoKey(101, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyF7);
        pkeys[81] = new PianoKey(102, blackKeyPressed, blackKey, blackBassKey, blackBassKeyPressed, keyFsharp7);
        pkeys[82] = new PianoKey(103, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyG7);
        pkeys[83] = new PianoKey(104, blackKeyPressed, blackKey, blackBassKey, blackBassKeyPressed, keyGsharp7);
        pkeys[84] = new PianoKey(105, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyA7);
        pkeys[85] = new PianoKey(106, blackKeyPressed, blackKey, blackBassKey, blackBassKeyPressed, keyBb7);
        pkeys[86] = new PianoKey(107, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyB7);

        // 8th octave keys
        pkeys[87] = new PianoKey(108, whiteKeyPressed, whiteKey, bassKey, bassKeyPressed, keyC8);

        // 0th octave keys
        labels[0] = A0;
        labels[1] = Bb0;
        labels[2] = B0;

        // 1st octave labels
        labels[3] = C1;
        labels[4] = Csharp1;
        labels[5] = D1;
        labels[6] = Eb1;
        labels[7] = E1;
        labels[8] = F1;
        labels[9] = Fsharp1;
        labels[10] = G1;
        labels[11] = Gsharp1;
        labels[12] = A1;
        labels[13] = Bb1;
        labels[14] = B1;

        // 2nd octave labels
        labels[15] = C2;
        labels[16] = Csharp2;
        labels[17] = D2;
        labels[18] = Eb2;
        labels[19] = E2;
        labels[20] = F2;
        labels[21] = Fsharp2;
        labels[22] = G2;
        labels[23] = Gsharp2;
        labels[24] = A2;
        labels[25] = Bb2;
        labels[26] = B2;

        // 3rd octave labels
        labels[27] = C3;
        labels[28] = Csharp3;
        labels[29] = D3;
        labels[30] = Eb3;
        labels[31] = E3;
        labels[32] = F3;
        labels[33] = Fsharp3;
        labels[34] = G3;
        labels[35] = Gsharp3;
        labels[36] = A3;
        labels[37] = Bb3;
        labels[38] = B3;

        // 4th octave labels
        labels[39] = C4;
        labels[40] = Csharp4;
        labels[41] = D4;
        labels[42] = Eb4;
        labels[43] = E4;
        labels[44] = F4;
        labels[45] = Fsharp4;
        labels[46] = G4;
        labels[47] = Gsharp4;
        labels[48] = A4;
        labels[49] = Bb4;
        labels[50] = B4;

        // 5th octave labels
        labels[51] = C5;
        labels[52] = Csharp5;
        labels[53] = D5;
        labels[54] = Eb5;
        labels[55] = E5;
        labels[56] = F5;
        labels[57] = Fsharp5;
        labels[58] = G5;
        labels[59] = Gsharp5;
        labels[60] = A5;
        labels[61] = Bb5;
        labels[62] = B5;

        // 6th octave labels
        labels[63] = C6;
        labels[64] = Csharp6;
        labels[65] = D6;
        labels[66] = Eb6;
        labels[67] = E6;
        labels[68] = F6;
        labels[69] = Fsharp6;
        labels[70] = G6;
        labels[71] = Gsharp6;
        labels[72] = A6;
        labels[73] = Bb6;
        labels[74] = B6;

        // 7th octave labels
        labels[75] = C7;
        labels[76] = Csharp7;
        labels[77] = D7;
        labels[78] = Eb7;
        labels[79] = E7;
        labels[80] = F7;
        labels[81] = Fsharp7;
        labels[82] = G7;
        labels[83] = Gsharp7;
        labels[84] = A7;
        labels[85] = Bb7;
        labels[86] = B7;

        // 8th octave labels
        labels[87] = C8;

        // Set up NotePanes for chords

        int numberOfPanes = 6;

        int paneBase = 100;
        int paneDisplacement = 160;

        savedPanes = new ArrayList();
        staffDisplay = new javax.swing.JLabel[numberOfPanes];
        displayPane = new ChordPane[numberOfPanes];
        for (int i = 0; i < numberOfPanes; i++) {
            staffDisplay[i] = new javax.swing.JLabel(staffIcon);
            staffDisplay[i].setOpaque(false);
            staffDisplay[i].setBackground(Color.white);
            staffDisplay[i].setFocusable(false);
            staffDisplay[i].setBounds(paneBase + i * paneDisplacement, 25, 162, 370);
            voicingStaffPanel.add(staffDisplay[i]);

            displayPane[i] = new ChordPane(""); //currentChordName);
            displayPane[i].setBounds(paneBase + i * paneDisplacement, 10, 162, 370);
            voicingStaffPanel.add(displayPane[i]);
        }
    }

    /**
     * sets all the labels to the same color as the background
     */
    public void setInvisible() {
        for (int r = 0; r < 88; r++) {
            labels[r].setForeground(new Color(240, 240, 240));
        }
    }

    public PianoKey[] pianoKeys() {
        return pkeys;
    }

    public void closeWindow() {
        setVisible(false);
        notate.closeKeyboard();
        WindowRegistry.unregisterWindow(this);
    }


}
