/**
 * This Java Class is part of the Impro-Visor Application
 *
 * Copyright (C) 2005-2016 Robert Keller and Harvey Mudd College
 *
 * Impro-Visor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Impro-Visor is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * merchantability or fitness for a particular purpose.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Impro-Visor; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */
package imp.style;

import imp.util.BasicEditor;
import java.io.File;
import imp.style.StyleEditor;

/**
 *
 * @author isysjo
 */
public class StyleTextualEditor extends javax.swing.JDialog implements BasicEditor {

    private String title = "";
    private String contents = "";
    File contentsFile;
    StyleEditor parent;
    /**
     * Creates new form StyleTextualEditor
     */
    public StyleTextualEditor(StyleEditor parent, boolean modal) {
        super(parent, modal);
        this.parent = parent;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sourceEditorScrollPane = new javax.swing.JScrollPane();
        sourceEditor = new javax.swing.JTextArea();
        editorToSourceButton = new javax.swing.JButton();
        sourceToEditorButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        sourceEditorScrollPane.setMinimumSize(new java.awt.Dimension(600, 20000));
        sourceEditorScrollPane.setPreferredSize(new java.awt.Dimension(600, 20000));
        sourceEditorScrollPane.setVerifyInputWhenFocusTarget(false);

        sourceEditor.setColumns(20);
        sourceEditor.setLineWrap(true);
        sourceEditor.setRows(5);
        sourceEditor.setAutoscrolls(false);
        sourceEditor.setMinimumSize(new java.awt.Dimension(600, 40000));
        sourceEditor.setPreferredSize(new java.awt.Dimension(600, 40000));
        sourceEditorScrollPane.setViewportView(sourceEditor);

        getContentPane().add(sourceEditorScrollPane, java.awt.BorderLayout.CENTER);

        editorToSourceButton.setText("Editor to Style");
        editorToSourceButton.setToolTipText("Load the current leadsheet to the textual editor.\n");
        editorToSourceButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        editorToSourceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editorToSourceButtonActionPerformed(evt);
            }
        });
        getContentPane().add(editorToSourceButton, java.awt.BorderLayout.SOUTH);

        sourceToEditorButton.setText("Style to Editor");
        sourceToEditorButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        sourceToEditorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sourceToEditorButtonActionPerformed(evt);
            }
        });
        getContentPane().add(sourceToEditorButton, java.awt.BorderLayout.NORTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void editorToSourceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editorToSourceButtonActionPerformed

        String contents = sourceEditor.getText(); // Get the contents of the edit window.
        
        parent.reset(); // Clear the GUI StyleEditor
        
        parent.loadFromString(contents);  // Have the StyleEditor read the contents
    }//GEN-LAST:event_editorToSourceButtonActionPerformed
 
    public void fillEditor()
    {
        setSize(900, 1000);
        setText(parent.saveToString());
    }
    
    private void stringToFile(String str) {
        contentsFile = new File(str);
        
    }
    
    public File getContentsFile()
    {
        return contentsFile;
    }
 
     @Override
    public String getTitle() {
        return title;
    }
    
    public String getText() {
        return sourceEditor.getText();
    }
    
    public void setText(String text) {
      
        sourceEditor.setSize(600, 2000);
        sourceEditor.setText(text);
    }

    public void setRows(int numRows)
    {
        sourceEditor.setRows(numRows);
    }
    private void sourceToEditorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sourceToEditorButtonActionPerformed
        fillEditor();
    }//GEN-LAST:event_sourceToEditorButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton editorToSourceButton;
    private javax.swing.JTextArea sourceEditor;
    private javax.swing.JScrollPane sourceEditorScrollPane;
    private javax.swing.JButton sourceToEditorButton;
    // End of variables declaration//GEN-END:variables
}
